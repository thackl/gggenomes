[{"path":"https://thackl.github.io/gggenomes/articles/emales.html","id":"read-in-the-genomes","dir":"Articles","previous_headings":"","what":"Read in the genomes","title":"From a few sequences to a complex map in minutes (old version)","text":"start fasta file 33 viral genomes. read sequence length metadata header lines using `readfai`…","code":"library(gggenomes)  # parse sequence length and some metadata from fasta file emale_seqs <- read_fai(\"emales.fna\") %>%   tidyr::extract(seq_desc, into = c(\"emale_type\", \"is_typespecies\"), \"=(\\\\S+) \\\\S+=(\\\\S+)\",     remove=F, convert=T) %>%   dplyr::arrange(emale_type, length)  # plot the genomes - first six only to keep it simple for this example emale_seqs_6 <- emale_seqs[1:6,] p1 <- gggenomes(emale_seqs_6) +  geom_seq() + geom_bin_label() p1"},{"path":"https://thackl.github.io/gggenomes/articles/emales.html","id":"annotate-genes","dir":"Articles","previous_headings":"","what":"Annotate genes","title":"From a few sequences to a complex map in minutes (old version)","text":"","code":"# https://github.com/thackl/seq-scripts seq-join -n emales-concat < emales.fna > emales-concat.fna                        # Annotate genes | https://github.com/hyattpd/Prodigal prodigal -n -t emales-prodigal.train -i emales-concat.fna                                  prodigal -t emales-prodigal.train -i emales.fna -o emales-prodigal.gff -f gff # A little help to clean up the prodigal gff | https://github.com/thackl/seq-scripts gff-clean emales-prodigal.gff > emales.gff emale_genes <- read_gff(\"emales.gff\") %>%   dplyr::rename(feature_id=ID) %>%                       # we'll need this later   dplyr::mutate(gc_cont=as.numeric(gc_cont))             # per gene GC-content  p2 <- gggenomes(emale_seqs_6, emale_genes) +   geom_seq() + geom_bin_label() +   geom_gene(aes(fill=gc_cont)) +   scale_fill_distiller(palette=\"Spectral\") p2"},{"path":"https://thackl.github.io/gggenomes/articles/emales.html","id":"find-terminal-inverted-repeats","dir":"Articles","previous_headings":"","what":"Find terminal inverted repeats","title":"From a few sequences to a complex map in minutes (old version)","text":"known type viruses often linear genomes terminal inverted repeats (TIRs). let’s look next.","code":"# split into one genome per file | https://bioinf.shenwei.me/seqkit/ seqkit split -i emales.fna   # self-align opposite strands                         for fna in `ls emales.fna.split/*.fna`; do   minimap2 -c -B5 -O6 -E3 --rev-only $fna $fna > $fna.paf; done; cat emales.fna.split/*.paf > emales-tirs.paf # prefilter hits by minimum length and maximum divergence emale_tirs_paf <- read_paf(\"emales-tirs.paf\") %>%   dplyr::filter(seq_id1 == seq_id2 & start1 < start2 & map_length > 99 & de < 0.1) emale_tirs <- bind_rows(   dplyr::select(emale_tirs_paf, seq_id=seq_id1, start=start1, end=end1, de),   dplyr::select(emale_tirs_paf, seq_id=seq_id2, start=start2, end=end2, de))  p3 <- gggenomes(emale_seqs_6, emale_genes, emale_tirs) +   geom_seq() + geom_bin_label() +   geom_feature(size=5) +   geom_gene(aes(fill=gc_cont)) +   scale_fill_distiller(palette=\"Spectral\") p3"},{"path":"https://thackl.github.io/gggenomes/articles/emales.html","id":"compare-genome-synteny","dir":"Articles","previous_headings":"","what":"Compare genome synteny","title":"From a few sequences to a complex map in minutes (old version)","text":"","code":"# All-vs-all alignment | https://github.com/lh3/minimap2 minimap2 -X -N 50 -p 0.1 -c emales.fna emales.fna > emales.paf emale_links <- read_paf(\"emales.paf\")  p4 <- gggenomes(emale_seqs_6, emale_genes, emale_tirs, emale_links) +   geom_seq() + geom_bin_label() +   geom_feature(size=5, data=use_features(features)) +   geom_gene(aes(fill=gc_cont)) +   geom_link() +   scale_fill_distiller(palette=\"Spectral\")  p4 <- p4 %>% flip_bins(3:5) p4"},{"path":"https://thackl.github.io/gggenomes/articles/emales.html","id":"gc-content","dir":"Articles","previous_headings":"","what":"GC-content","title":"From a few sequences to a complex map in minutes (old version)","text":"","code":"# https://github.com/thackl/seq-scripts (bedtools & samtools) seq-gc -Nbw 50 emales.fna > emales-gc.tsv emale_gc <- thacklr::read_bed(\"emales-gc.tsv\") %>%   dplyr::rename(seq_id=contig_id)  p5 <- p4 %>% add_features(emale_gc) p5 <- p5 + geom_ribbon(aes(x=(x+xend)/2, ymax=y+.24, ymin=y+.38-(.4*score),     group=seq_id, linetype=\"GC-content\"), use_features(emale_gc),                        fill=\"blue\", alpha=.5) p5"},{"path":"https://thackl.github.io/gggenomes/articles/emales.html","id":"cluster-protein-sequences-into-orthogroups","dir":"Articles","previous_headings":"","what":"cluster protein sequences into orthogroups","title":"From a few sequences to a complex map in minutes (old version)","text":"","code":"gff2cds --aa --type CDS --source Prodigal_v2.6.3 --fna emales.fna emales.gff > emales.faa mmseqs easy-cluster emales.faa emales-mmseqs /tmp -e 1e-5 -c 0.7; cluster-ids -t \"cog%03d\" < emales-mmseqs_cluster.tsv > emales-cogs.tsv emale_cogs <- read_tsv(\"emales-cogs.tsv\", col_names = c(\"feature_id\", \"cluster_id\", \"cluster_n\")) emale_cogs %<>% dplyr::mutate(   cluster_label = paste0(cluster_id, \" (\", cluster_n, \")\"),   cluster_label = fct_lump_min(cluster_label, 5, other_level = \"rare\"),   cluster_label = fct_lump_min(cluster_label, 15, other_level = \"medium\"),   cluster_label = fct_relevel(cluster_label, \"rare\", after=Inf)) emale_cogs   p6 <- gggenomes(emale_seqs_6, emale_genes, emale_tirs, emale_links) %>%   add_features(emale_gc) %>%   add_clusters(genes, emale_cogs) %>%   flip_bins(3:5) +   geom_seq() + geom_bin_label() +   geom_feature(size=5, data=use_features(features)) +   geom_gene(aes(fill=cluster_label)) +   geom_link() +   geom_ribbon(aes(x=(x+xend)/2, ymax=y+.24, ymin=y+.38-(.4*score),     group=seq_id, linetype=\"GC-content\"), use_features(emale_gc),                        fill=\"blue\", alpha=.5) +   scale_fill_brewer(\"Conserved genes\", palette=\"Set3\")  p6"},{"path":"https://thackl.github.io/gggenomes/articles/emales.html","id":"blast-hits-and-integrated-transposons","dir":"Articles","previous_headings":"","what":"Blast hits and integrated transposons","title":"From a few sequences to a complex map in minutes (old version)","text":"","code":"# mavirus.faa - published blastp -query emales.faa -subject mavirus.faa -outfmt 7 > emales_mavirus-blastp.tsv perl -ne 'if(/>(\\S+) gene=(\\S+) product=(.+)/){print join(\"\\t\", $1, $2, $3), \"\\n\"}' \\   mavirus.faa > mavirus.tsv emale_blast <- read_blast(\"emales_mavirus-blastp.tsv\") emale_blast %<>%   dplyr::filter(evalue < 1e-3) %>%   dplyr::select(feature_id=qaccver, start=qstart, end=qend, saccver) %>%   dplyr::left_join(read_tsv(\"mavirus.tsv\", col_names = c(\"saccver\", \"blast_hit\", \"blast_desc\")))  # manual annotations by MFG emale_transposons <- read_gff(\"emales-manual.gff\", types = c(\"mobile_element\"))   p7 <- gggenomes(emale_seqs_6, emale_genes, emale_tirs, emale_links) %>%   add_features(emale_gc) %>%   add_clusters(genes, emale_cogs) %>%   add_features(emale_transposons) %>%   add_subfeatures(genes, emale_blast, transform=\"aa2nuc\") %>%   flip_bins(3:5) +   geom_feature(aes(color=\"integrated transposon\"),     use_features(emale_transposons), size=7) +   geom_seq() + geom_bin_label() +   geom_link(offset = c(0.3, 0.2), color=\"white\", alpha=.3) +   geom_feature(aes(color=\"terminal inverted repeat\"), use_features(features),     size=4) +   geom_gene(aes(fill=cluster_label)) +   geom_feature(aes(color=blast_desc), use_features(emale_blast), size=2,     position=\"pile\") +    geom_ribbon(aes(x=(x+xend)/2, ymax=y+.24, ymin=y+.38-(.4*score),     group=seq_id, linetype=\"GC-content\"), use_features(emale_gc),                        fill=\"blue\", alpha=.5) +   scale_fill_brewer(\"Conserved genes\", palette=\"Set3\") +   scale_color_viridis_d(\"Blast hits & Features\", direction = -1) +   scale_linetype(\"Graphs\") +   ggtitle(expression(paste(\"Endogenous mavirus-like elements of \",   italic(\"C. burkhardae\"))))  p7"},{"path":"https://thackl.github.io/gggenomes/articles/gggenomes.html","id":"geoms-and-tracks","dir":"Articles","previous_headings":"","what":"Geoms and tracks","title":"gggenomes - a multi-track ggplot2 extension for comparative genomics","text":"regular ggplot2, geoms read one central dataframe. gggenomes, several tracks read data . specify tracks use geoms, gggenomes provides accessory functions work inside geom calls provided data argument (outside prefixed pull_). names functions mirror track types work quite intuitive: geom_seq()  : data=seqs() seq track geom_feat() : data=feats() first feat track named “genes” geom_link() : data=links() first link track geom_gene() : data=genes() first feat track extras geneish features (see Inside gggenomes tracks details) gggenomes supports arbitrary number feature link tracks within plot. Extra tracks can added either providing list tracks gggenomes(), using dedicated add_feats() / add_links() functions. extra tracks can used via aforementioned accessory function inside geom calls using names positional arguments. Like gggenomes functions track accessory functions use tidyverse-style non-standard evaluation, means can refer tracks either unquoted names numeric position.","code":"# Let's use some of the bundled example data here data(package=\"gggenomes\")  p <- gggenomes(   genes=emale_genes,  # a gene track, added as first feat track   seqs=emale_seqs,    # a seq track   feats=list(emale_tirs, emale_ngaros),  # multiple feat tracks   links=emale_ava     # a link track )  # inspect the tracks of the plot p %>% track_info ## # A tibble: 5 × 4 ## # Groups:   type [3] ##   id           type      i     n ##   <chr>        <chr> <int> <int> ## 1 seqs         seqs      1     6 ## 2 genes        feats     1   143 ## 3 emale_tirs   feats     2    12 ## 4 emale_ngaros feats     3     3 ## 5 links        links     1    38 # plot all tracks p + #  geom_link() +  # the first link track   geom_gene() +  # the first feat track filtered for geneish feats: CDS, mRNA, ..   geom_feat() +  # the first feat track not named \"genes\", here emale_tirs   # use an extra feat track by name   geom_feat(data=feats(emale_ngaros), color=\"plum3\")"},{"path":"https://thackl.github.io/gggenomes/articles/gggenomes.html","id":"one-layout-to-rule-them-all","dir":"Articles","previous_headings":"","what":"One layout to rule them all","title":"gggenomes - a multi-track ggplot2 extension for comparative genomics","text":"gggenomes multi-track setup pros cons. example, communicating information tracks plot construction supported ggplot2, - well - ’s designed work single table. gggenomes works around pre-computing layout, adding coordinates (y,x,xend) dataframe prior actual plot construction. implications usage gggenomes: Dataframes tracks required variables, e.g. seq_id,start,end features. predefined variables used import compute x/y coordinates (see Inside gggenomes tracks details). gggenomes geoms can often used without explicit aes() mappings - rather convenient upside multi-track setup. works always know names plot variables ahead time: originate pre-computed layout, can use information set sensible default aesthetic mappings cases.","code":"# inspect seqs track with layout vars - note y,x,xend p %>% pull_seqs ## # A tibble: 6 × 12 ## # Groups:   bin_id [6] ##       y     x  xend strand seq_id   bin_id length bin_offset start   end file_id ##   <int> <dbl> <dbl> <chr>  <chr>    <chr>   <int>      <dbl> <dbl> <int> <chr>   ## 1     6     0 20152 +      RCC970_… RCC97…  20152          0     1 20152 emales  ## 2     5     0 20642 +      E4-10_0… E4-10…  20642          0     1 20642 emales  ## 3     4     0 21311 +      Cflag_0… Cflag…  21311          0     1 21311 emales  ## 4     3     0 26808 +      BVI_069  BVI_0…  26808          0     1 26808 emales  ## 5     2     0 26820 +      BVI_008A BVI_0…  26820          0     1 26820 emales  ## 6     1     0 26856 +      E4-10_1… E4-10…  26856          0     1 26856 emales  ## # ℹ 1 more variable: seq_desc <chr> # inspect genes track with layout vars - note y,x,xend, but also other # columns such as strand, feat_id or type, that are added automatically p %>% pull_genes ## # A tibble: 143 × 22 ##        y     x  xend bin_id   seq_id   start   end file_id strand type  feat_id  ##    <int> <dbl> <dbl> <chr>    <chr>    <int> <int> <chr>   <chr>  <chr> <chr>    ##  1     2   567   822 BVI_008A BVI_008A   568   822 emales  +      CDS   BVI_008… ##  2     2  2668  1039 BVI_008A BVI_008A  1040  2668 emales  -      CDS   BVI_008… ##  3     2  3028  2767 BVI_008A BVI_008A  2768  3028 emales  -      CDS   BVI_008… ##  4     2  4776  3138 BVI_008A BVI_008A  3139  4776 emales  -      CDS   BVI_008… ##  5     2  5370  4809 BVI_008A BVI_008A  4810  5370 emales  -      CDS   BVI_008… ##  6     2  6065  5396 BVI_008A BVI_008A  5397  6065 emales  -      CDS   BVI_008… ##  7     2  6683  6074 BVI_008A BVI_008A  6075  6683 emales  -      CDS   BVI_008… ##  8     2  6867  6540 BVI_008A BVI_008A  6541  6867 emales  -      CDS   BVI_008… ##  9     2  6954  7788 BVI_008A BVI_008A  6955  7788 emales  +      CDS   BVI_008… ## 10     2  7997  9026 BVI_008A BVI_008A  7998  9026 emales  +      CDS   BVI_008… ## # ℹ 133 more rows ## # ℹ 11 more variables: introns <list>, parent_ids <list>, source <chr>, ## #   score <chr>, phase <int>, width <chr>, gc_content <chr>, name <chr>, ## #   Note <chr>, geom_id <chr>, .marginal <lgl>"},{"path":"https://thackl.github.io/gggenomes/articles/gggenomes.html","id":"plotting-from-scratch","dir":"Articles","previous_headings":"","what":"Plotting from scratch","title":"gggenomes - a multi-track ggplot2 extension for comparative genomics","text":"minimum requirement create gggenomes plot single track. can three types: seqs, feats links. sequence track, sequence track inferred data simply assuming sequence feature link maps onto must exist, must long enough accommodate associated features links (note corresponding log message ). Note also, unless sequence information explicitly provided, gggenomes zoom regions covered features. may appear odd first, ) consistent sense inferred sequence know start (x=1) anyway, guess end last feature, b) convenient deal real data: usually makes sense plot 5000 genes bacterial genome. cases want focus specific regions.","code":"# some genes g0 <- tibble::tibble(   seq_id = c(\"a\", \"a\", \"b\"),   start = c(50, 350, 80),   end = c(250, 500, 450) )  p <- gggenomes(g0) ## No seqs provided, inferring seqs from feats p +   geom_seq() +         # draw contig/chromosome lines   geom_seq_label() +   # label each sequence    geom_gene()          # draw genes as arrow ## Only saw `type=NA` in genes and will treat everything as `type=\"CDS\"`."},{"path":"https://thackl.github.io/gggenomes/articles/gggenomes.html","id":"plotting-from-files","dir":"Articles","previous_headings":"","what":"Plotting from files","title":"gggenomes - a multi-track ggplot2 extension for comparative genomics","text":"Plotting scratch fun, likely typical use-case. Usually files data want import. gggenomes provides bunch read_* functions help several common bioinformatics file formats. Moreover, gggenomes come set higher-level convenience read functions perfectly integrate track system. mean instead reading certain file format explicitly, read_gff3(\"foo.gff\"), can invoke generic read_feats(\"foo.gff\") function read features various file formats. File formats automatically recognized, , example, also works read_feats(\"foo.bed\"). can read different information file: read_seqs(\"foo.gff\") retrieve sequence information gff3 file instead gene/feature coordinates. said, real requirement data want plot somewhat tidy table, required variables (see ). Even data directly supported gggenomes read functions, easy convert data table works gggenomes.","code":"# note: ex() is just a helper to get stable paths to gggenomes example data s0 <- read_seqs(ex(\"emales/emales.fna\")) g0 <- read_feats(ex(\"emales/emales.gff\"))  gggenomes(g0, s0) +   geom_seq() + geom_gene() # for lazy people gggenomes(ex(\"emales/emales.gff\")) + geom_gene() # and really fancy: multiple remote files, all at once gbk_phages <- c(   PSSP7 = \"ftp://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/858/745/GCF_000858745.1_ViralProj15134/GCF_000858745.1_ViralProj15134_genomic.gff.gz\",   PSSP3 = \"ftp://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/904/555/GCF_000904555.1_ViralProj195517/GCF_000904555.1_ViralProj195517_genomic.gff.gz\")  try( # capture unavailable web resources gracefully for CRAN https://github.com/thackl/gggenomes/issues/197 gggenomes(gbk_phages) + geom_gene() +   geom_seq_label() )"},{"path":"https://thackl.github.io/gggenomes/articles/gggenomes.html","id":"inside-gggenomes-tracks","dir":"Articles","previous_headings":"","what":"Inside gggenomes tracks","title":"gggenomes - a multi-track ggplot2 extension for comparative genomics","text":"mentioned , tracks required columns optional columns, can additional meaning context plot. seqs: sequences contigs chromosomes required: seq_id,length recognized: bin_id,start,end,strand feats: genes, SNPs, repeats, … required: seq_id,start,end recognized: strand,bin_id,feat_id,introns links: connections two locations different sequences required: seq_id,seq_id2 recognized: start,end,bin_id,start2,end2,bin_id2,strand","code":""},{"path":"https://thackl.github.io/gggenomes/articles/gggenomes.html","id":"sequence-track---there-can-be-only-one","dir":"Articles","previous_headings":"Inside gggenomes tracks","what":"Sequence track - there can be only one","title":"gggenomes - a multi-track ggplot2 extension for comparative genomics","text":"seq_id,length required variables quite self-explanatory. ’s highly recommended (might become compulsory future) seq_ids unique within entire data set. optional column seqs : bin_id denote bins representing genomes assemblies multiple chromosomes contigs. Sequences bin drawn next default layout, opposed sequence different bins occupy different rows. omitted, default set bin_id=seq_id, means, every sequence gets row.  start,end,strand context sequence denote region locus sequence. provided, part sequence within locus boundaries shown plot. also remove features plot fall within locus. ’s likely rare one wants specify information directly, important power manipulation functions focus().","code":"# seq track: one entry per sequence s0 <- tibble::tibble(   bin_id = c(\"A\", \"A\", \"B\"),   seq_id = c(\"a1\",\"a2\",\"b1\"),   length = c(2e5, 3e5, 5e5) )  p <-  gggenomes(seqs=s0)  p +   geom_seq() +         # draw contig/chromosome lines   geom_seq_label()    # label each sequence #geom_bin_label()  # label each bin # zoom in on a longer sequence - note the scale on the x-axis s0 <- tibble::tibble(   seq_id = \"a1\",   length = 10000,   start = 1000,   end = 3000 ) gggenomes(seqs=s0) + geom_seq() + geom_seq_label()"},{"path":"https://thackl.github.io/gggenomes/articles/gggenomes.html","id":"feature-tracks---what-maps-onto-sequences","dir":"Articles","previous_headings":"Inside gggenomes tracks","what":"Feature tracks - what maps onto sequences","title":"gggenomes - a multi-track ggplot2 extension for comparative genomics","text":", required variables seq_id,start,end self-explainatory. Note though, features seq_ids present seq track silently ignored. Also note gggenomes uses 1-based, inclusive ranges denote feature start/end coordinates. ’s system used GFF, GenBank, BLAST SAM, example. contrast, BED BAM, example, use 0-based, exclusive ranges. Something keep mind importing data formats. optional columns features : strand denote orientation feature relative sequences maps . default way specifying strand character vector \"+/-/.\" coding forward, reverse undetermined. Logical (TRUE/FALSE/NA) numeric vectors (1/-1/0) supported well. bin_id works seqs. assignment bin_ids features usually useful, sequences provided. Otherwise, bin information inherited sequences. feat_id unique ID feature. IDs useful want add data plot pertains features sequences. example, can add results protein blast search genes proteins derived matching blast results feature annotations using feat_id. provided, automatically generated. Special variables complex gene models: introns special column can contain list numeric vectors denote intron start end coordinates within given feature. support introns something just recently added. ’s still experimental handling might change future versions.","code":"# some genes g0 <- tibble::tibble(   seq_id = c(\"a\"),   start = c(1, 800),   end = c(500, 1200),   # NOTE: introns need to be a list-column!   introns = list(c(50,200), c(50,200,250,300)) )  gggenomes(g0) +   geom_seq() +         # draw contig/chromosome lines   geom_seq_label() +   # label each sequence    geom_gene()          # draw genes as arrow ## No seqs provided, inferring seqs from feats ## Only saw `type=NA` in genes and will treat everything as `type=\"CDS\"`."},{"path":"https://thackl.github.io/gggenomes/articles/gggenomes.html","id":"link-tracks---show-me-the-synteny","dir":"Articles","previous_headings":"Inside gggenomes tracks","what":"Link tracks - show me the synteny","title":"gggenomes - a multi-track ggplot2 extension for comparative genomics","text":"link track connects loci/regions two adjacent sequences/genomes one another. seq_id, seq_id2 required variables link track. , links seq_ids present sequence (seq) track silently ignored. correctly link specific loci/regions sequences one another, also highly recommend use following optional variables: (Without variables, start, start2,endandend2`, links made two entire sequences/contigs two specific loci/regions.) start, start2 indicates starting position loci/region linked respectively first sequence (seq_id) second sequence (seq_id2). Note links can created adjacent sequences. end, end2 similar start start2, now indicates end loci/region linked. respectively seq_id seq_id2. bin_id, bin_id2 works seqs. assignment bin_ids features usually useful, sequences provided. Otherwise, bin information inherited sequences. strand, works feats. strand denotes orientation link relative two sequences. abscent, orientation derived start end positions.","code":"# some links l0 <- tibble::tibble(   seq_id = c(\"a\", \"a\", \"a\"),   start = c(200, 801, 1600),   end = c(550, 1300, 1800),   seq_id2 = c(\"b\", \"b\", \"b\"),   start2 = c(1100, 1, 1800),   end2 = c(1450, 500, 1600) )  # corresponding sequences s1 <- tibble::tibble(   seq_id = c(\"a\", \"b\"),    length = c(2000, 2000),   start = c(1, 1),   end = c(2000, 2000) )   gggenomes(seqs=s1, links=l0)  +   geom_seq() +                  # draws contigs/chromosome lines     geom_seq_label()             # labels each sequence # geom_link(offset = 0.05)      # draws links between contigs"},{"path":"https://thackl.github.io/gggenomes/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Thomas Hackl. Author, maintainer. Markus J. Ankenbrand. Author. Bart van Adrichem. Author. Kristina Haslinger. Contributor, scientific advisor.","code":""},{"path":"https://thackl.github.io/gggenomes/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hackl, T., Ankenbrand, M., van Adrichem, B., Wilkins, D., & Haslinger, K. (2024). gggenomes: effective versatile visualizations comparative genomics. arXiv preprint arXiv:2411.13556.","code":"@Article{,   title = {gggenomes: effective and versatile visualizations for comparative genomics},   author = {Thomas Hackl and Markus Ankenbrand and Bart {van Adrichem} and David Wilkins and Kristina Haslinger},   year = {2024},   journal = {arXiv},   doi = {10.48550/arXiv.2411.13556}, }"},{"path":[]},{"path":"https://thackl.github.io/gggenomes/index.html","id":"a-grammar-of-graphics-for-comparative-genomics","dir":"","previous_headings":"","what":"A grammar of graphics for comparative genomics","title":"A Grammar of Graphics for Comparative Genomics","text":"gggenomes versatile graphics package comparative genomics. extends popular R visualization package ggplot2 adding dedicated plot functions genes, syntenic regions, etc. verbs manipulate plot , example, quickly zoom gene neighborhoods.","code":""},{"path":"https://thackl.github.io/gggenomes/index.html","id":"a-realistic-use-case-comparing-six-viral-genomes","dir":"","previous_headings":"","what":"A realistic use case comparing six viral genomes","title":"A Grammar of Graphics for Comparative Genomics","text":"gggenomes makes easy combine data annotations different sources one comprehensive elegant plot. compare genomic architecture 6 viral genomes initially described Hackl et al.: Endogenous virophages populate genomes marine heterotrophic flagellate  reproducible recipe describing full evolution earlier version plot older version gggenomes starting mere set contigs, including bioinformatics analysis workflow, look sequences complex map minutes.","code":"library(gggenomes)  # to inspect the example data shipped with gggenomes data(package=\"gggenomes\")  gggenomes(   genes = emale_genes, seqs = emale_seqs, links = emale_ava,   feats = list(emale_tirs, ngaros=emale_ngaros, gc=emale_gc)) |>    add_sublinks(emale_prot_ava) |>   sync() + # synchronize genome directions based on links   geom_feat(position=\"identity\", size=6) +   geom_seq() +   geom_link(data=links(2)) +   geom_bin_label() +   geom_gene(aes(fill=name)) +   geom_gene_tag(aes(label=name), nudge_y=0.1, check_overlap = TRUE) +   geom_feat(data=feats(ngaros), alpha=.3, size=10, position=\"identity\") +   geom_feat_note(aes(label=\"Ngaro-transposon\"), data=feats(ngaros),       nudge_y=.1, vjust=0) +   geom_wiggle(aes(z=score, linetype=\"GC-content\"), feats(gc),       fill=\"lavenderblush4\", position=position_nudge(y=-.2), height = .2) +   scale_fill_brewer(\"Genes\", palette=\"Dark2\", na.value=\"cornsilk3\")    ggsave(\"emales.png\", width=8, height=4)"},{"path":"https://thackl.github.io/gggenomes/index.html","id":"motivation--concept","dir":"","previous_headings":"","what":"Motivation & concept","title":"A Grammar of Graphics for Comparative Genomics","text":"Visualization corner stone exploratory analysis science communication. Bioinformatics workflows, unfortunately, tend generate plethora data products often adventurous formats making quite difficult integrate co-visualize results. Instead trying cater different formats explicitly, gggenomes embraces simple tidyverse-inspired credo: data set can transformed one () tidy data tables data set tidy data table can easily elegantly visualized result gggenomes helps bridge gap data generation, visual exploration, interpretation communication, thereby accelerating biological research. hood gggenomes uses light-weight track system accommodate mix related data sets, essentially implementing ggplot2 multiple tidy tables instead just one. data different tables tied together global genome layout automatically computed input defines positions genomic sequences (chromosome/contigs) associated features plot.","code":""},{"path":"https://thackl.github.io/gggenomes/index.html","id":"inspiration","dir":"","previous_headings":"","what":"Inspiration","title":"A Grammar of Graphics for Comparative Genomics","text":"gggenomes draws inspiration brilliant packages, particular: gggenes David Wilkins ggtree Guangchuang Yu ggraph Thomas Lin Pedersen","code":""},{"path":"https://thackl.github.io/gggenomes/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A Grammar of Graphics for Comparative Genomics","text":"gggenomes available stable release CRAN (v1.0.1). lastest developmental versions available github.","code":"# Install from CRAN install.packages(\"gggenomes\")   # optionally install ggtree to plot genomes next to trees # https://bioconductor.org/packages/release/bioc/html/ggtree.html if (!requireNamespace(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\") BiocManager::install(\"ggtree\")  # Install latest developmental version from github devtools::install_github(\"thackl/gggenomes\")"},{"path":"https://thackl.github.io/gggenomes/reference/GeomFeatText.html","id":null,"dir":"Reference","previous_headings":"","what":"Geom for feature text — GeomFeatText","title":"Geom for feature text — GeomFeatText","text":"Geom feature text","code":""},{"path":"https://thackl.github.io/gggenomes/reference/GeomFeatText.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Geom for feature text — GeomFeatText","text":"","code":"GeomFeatText"},{"path":"https://thackl.github.io/gggenomes/reference/GeomFeatText.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Geom for feature text — GeomFeatText","text":"object class GeomFeatText (inherits Geom, ggproto, gg) length 6.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/add_seqs.html","id":null,"dir":"Reference","previous_headings":"","what":"Add seqs — add_seqs","title":"Add seqs — add_seqs","text":"Add seqs","code":""},{"path":"https://thackl.github.io/gggenomes/reference/add_seqs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add seqs — add_seqs","text":"","code":"add_seqs(x, seqs, ...)"},{"path":"https://thackl.github.io/gggenomes/reference/add_seqs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add seqs — add_seqs","text":"x gggenomes gggenomes_layout objekt seqs sequences add ... pass as_seqs()","code":""},{"path":"https://thackl.github.io/gggenomes/reference/add_seqs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add seqs — add_seqs","text":"gggenomes gggenomes_layout object added seqs","code":""},{"path":"https://thackl.github.io/gggenomes/reference/add_tracks.html","id":null,"dir":"Reference","previous_headings":"","what":"Add different types of tracks — add_feats","title":"Add different types of tracks — add_feats","text":"Add different types tracks","code":""},{"path":"https://thackl.github.io/gggenomes/reference/add_tracks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add different types of tracks — add_feats","text":"","code":"add_feats(x, ...)  add_links(x, ..., .adjacent_only = TRUE)  add_subfeats(x, ..., .track_id = \"genes\", .transform = \"aa2nuc\")  add_sublinks(x, ..., .track_id = \"genes\", .transform = \"aa2nuc\")  add_clusters(x, ..., .track_id = \"genes\")"},{"path":"https://thackl.github.io/gggenomes/reference/add_tracks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add different types of tracks — add_feats","text":"x object add tracks (e.g. gggenomes, gggenomes_layout) ... named data.frames, .e. genes=gene_df, snps=snp_df .adjacent_only indicate whether links drawn vertically adjacent tracks .track_id track_id feats subfeats, sublinks clusters map . .transform one \"aa2nuc\", \"none\", \"nuc2aa\"","code":""},{"path":"https://thackl.github.io/gggenomes/reference/add_tracks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add different types of tracks — add_feats","text":"gggenomes object added features","code":""},{"path":"https://thackl.github.io/gggenomes/reference/add_tracks.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Add different types of tracks — add_feats","text":"add_feats(): Add feature annotations sequences add_links(): Add links connecting sequences, whole-genome alignment data. add_subfeats(): Add features features, gene/protein domains, blast hits genes/proteins, etc. add_sublinks(): Add links connect features, protein-protein alignments connecting genes. add_clusters(): Add gene clusters feature groups. Takes data.frame least two required columns cluster_id feat_id. data.frame converted link track connecting features belonging cluster entire length. Additionally, data.frame joined parent feature track, adding cluster_id additional columns parent table.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/add_tracks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add different types of tracks — add_feats","text":"","code":"# Add some repeat annotations gggenomes(seqs = emale_seqs) %>%   add_feats(repeats = emale_tirs) +   geom_seq() + geom_feat()   # Add all-vs-all whole-genome alignments gggenomes(seqs = emale_seqs) %>%   add_links(links = emale_ava) +   geom_seq() + geom_link()   # Add domains to genes genes <- tibble::tibble(seq_id = \"A\", start = 100, end = 200, feat_id = \"gene1\") domains <- tibble::tibble(feat_id = \"gene1\", start = 40, end = 80) gggenomes(genes = genes) %>% add_subfeats(domains, .transform = \"none\") +   geom_gene() + geom_feat() #> No seqs provided, inferring seqs from feats #> Only saw `type=NA` in genes and will treat everything as `type=\"CDS\"`.   # Add protein-protein alignments gggenomes(emale_genes) %>%   add_sublinks(emale_prot_ava) +   geom_gene() + geom_link() #> No seqs provided, inferring seqs from feats #> Transforming sublinks with \"aa2nuc\". Disable with `.transform = \"none\"`   # add clusters gggenomes(emale_genes, emale_seqs) %>%   add_clusters(emale_cogs) %>%   sync() + # works because clusters   geom_link() + # become links   geom_seq() +   # works because cluster info is joined to gene track   geom_gene(aes(fill = ifelse(is.na(cluster_id), NA,     stringr::str_glue(\"{cluster_id} [{cluster_size}]\")   ))) +   scale_fill_discrete(\"COGs\") #> Joining with `by = join_by(feat_id)` #> Flipping: Cflag_017B,BVI_069,BVI_008A"},{"path":"https://thackl.github.io/gggenomes/reference/as_feats.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a layout for feat data — as_feats","title":"Compute a layout for feat data — as_feats","text":"Read feat data genes tidy dataframe augment layout information based sequence layout.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/as_feats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a layout for feat data — as_feats","text":"","code":"as_feats(x, seqs, ..., everything = TRUE)"},{"path":"https://thackl.github.io/gggenomes/reference/as_feats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a layout for feat data — as_feats","text":"x feat data convertible feat layout seqs sequence layout feat map onto. ... passed layout_seqs() everything set FALSE drop optional columns","code":""},{"path":"https://thackl.github.io/gggenomes/reference/as_feats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute a layout for feat data — as_feats","text":"tbl_df plot coordinates","code":""},{"path":"https://thackl.github.io/gggenomes/reference/as_feats.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute a layout for feat data — as_feats","text":"Obligatory columns seq_id, start end. Also recognized strand bin_id. Note start end every record coerced start < end. strand provided, strand added set \"+\" records initially start < end \"-\" end < start inputs. strand provided, start end ordered without additional effect.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/as_links.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a layout for link data — as_links","title":"Compute a layout for link data — as_links","text":"Read link data pairwise sequence feat comparisons, similarity searches tidy dataframe augment layout information based sequence layout.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/as_links.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a layout for link data — as_links","text":"","code":"as_links(x, seqs, ..., everything = TRUE)"},{"path":"https://thackl.github.io/gggenomes/reference/as_links.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a layout for link data — as_links","text":"x link data convertible link layout seqs sequence layout feat map onto. ... passed layout_seqs() everything set FALSE drop optional columns","code":""},{"path":"https://thackl.github.io/gggenomes/reference/as_links.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute a layout for link data — as_links","text":"link layout","code":""},{"path":"https://thackl.github.io/gggenomes/reference/as_links.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute a layout for link data — as_links","text":"Obligatory columns seq_id seq_id2. Also recognized start, end,start2,end2,strand, bin_idandbin_id2. layouting, seq_id,start,end projected x,xend,y, seq_id2,start2,end2 projected xmin,xmax,yend. gggenomes uses maybe bit odd names variables , play nice ggplots native transformation functions position aesthetics. work well specific set predefined var names, include used .","code":""},{"path":"https://thackl.github.io/gggenomes/reference/as_seqs.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a layout for sequence data — as_seqs","title":"Compute a layout for sequence data — as_seqs","text":"Read sequence data multiple genomes (contigs, chromosomes, ...) tidy dataframe augment layout information necessary plotting.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/as_seqs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a layout for sequence data — as_seqs","text":"","code":"as_seqs(x, ...)  # S3 method for class 'tbl_df' as_seqs(x, everything = TRUE, ...)"},{"path":"https://thackl.github.io/gggenomes/reference/as_seqs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a layout for sequence data — as_seqs","text":"x object convertible sequence layout ... pass layout_seqs() everything set FALSE drop optional columns","code":""},{"path":"https://thackl.github.io/gggenomes/reference/as_seqs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute a layout for sequence data — as_seqs","text":"tbl_df plot coordinates","code":""},{"path":"https://thackl.github.io/gggenomes/reference/as_seqs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute a layout for sequence data — as_seqs","text":"Obligatory columns seq_id, bin_id length.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/as_seqs.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Compute a layout for sequence data — as_seqs","text":"as_seqs(tbl_df): Convert list tibbles seq layout","code":""},{"path":"https://thackl.github.io/gggenomes/reference/as_seqs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute a layout for sequence data — as_seqs","text":"","code":"chr <- tibble::tibble(   seq_id = c(\"a1\", \"b1\", \"b2\"),   bin_id = c(rep(\"A\", 1), rep(\"B\", 2)),   length = c(5000, 3000, 1400) )  as_seqs(chr)"},{"path":"https://thackl.github.io/gggenomes/reference/as_subfeats.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a layout for subfeat data — as_subfeats","title":"Compute a layout for subfeat data — as_subfeats","text":"Read subfeat data domains blast hits genes tidy dataframe. Subfeats need associated already added feat track. subfeat track internally converted new, regular feat track mapping start end coordinates provided relative parent feat coordinates relative sequences underlying parent feats.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/as_subfeats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a layout for subfeat data — as_subfeats","text":"","code":"as_subfeats(x, seqs, feats, ..., everything = TRUE)  # S3 method for class 'tbl_df' as_subfeats(   x,   seqs,   feats,   ...,   everything = TRUE,   transform = c(\"none\", \"aa2nuc\", \"nuc2aa\") )"},{"path":"https://thackl.github.io/gggenomes/reference/as_subfeats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a layout for subfeat data — as_subfeats","text":"x subfeat data convertible feat layout seqs sequence layout parent feats map onto. feats parent feats subfeats map onto. ... passed layout_seqs() spaces, .e. matching nucleotide-level annotations protein level annotations, e.g. genes protein blast results. everything set FALSE drop optional columns transform use feats subfeats different coordinate","code":""},{"path":"https://thackl.github.io/gggenomes/reference/as_subfeats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute a layout for subfeat data — as_subfeats","text":"tbl_df plot coordinates","code":""},{"path":"https://thackl.github.io/gggenomes/reference/as_subfeats.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute a layout for subfeat data — as_subfeats","text":"Obligatory columns feat_id, start end. Also recognized strand bin_id. Note start end every record coerced start < end. strand provided, strand added set \"+\" records initially start < end \"-\" end < start inputs. strand provided, start end reorganized conform start < end without additional effect.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/as_subfeats.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Compute a layout for subfeat data — as_subfeats","text":"as_subfeats(tbl_df): Convert list tibbles feat layout","code":""},{"path":"https://thackl.github.io/gggenomes/reference/as_sublinks.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a layout for links linking feats — as_sublinks","title":"Compute a layout for links linking feats — as_sublinks","text":"Reads sublinks connecting feats -vs-protein blasts tidy dataframe. sublinks need associated already added feat track. sublinks internally converted regular link track mapping feat-based start end coordinates coordinates relative sequences underlying linked feats.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/as_sublinks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a layout for links linking feats — as_sublinks","text":"","code":"as_sublinks(x, seqs, feats, ..., everything = TRUE)  # S3 method for class 'tbl_df' as_sublinks(   x,   seqs,   feats,   ...,   everything = TRUE,   transform = c(\"none\", \"aa2nuc\", \"nuc2aa\"),   compute_layout = TRUE )"},{"path":"https://thackl.github.io/gggenomes/reference/as_sublinks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a layout for links linking feats — as_sublinks","text":"x sublink data convertible link layout seqs sequence layout linked feats map onto. feats feats sublinks map onto. ... passed layout_seqs() spaces, .e. matching nucleotide-level annotations protein level annotations, e.g. genes protein blast results. everything set FALSE drop optional columns transform use feats sublinks different coordinate compute_layout set FALSE skip layout computation","code":""},{"path":"https://thackl.github.io/gggenomes/reference/as_sublinks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute a layout for links linking feats — as_sublinks","text":"tbl_df plot coordinates","code":""},{"path":"https://thackl.github.io/gggenomes/reference/as_sublinks.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute a layout for links linking feats — as_sublinks","text":"obligatory columns feat_id & feat_id2. Also recognized start/end, start2/end2 strand. Note start end every record coerced start < end. strand provided, strand added set \"+\" records initially start < end == start2 < end2 \"-\" otherwise. strand provided, start end reorganized conform start < end without additional effect.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/as_sublinks.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Compute a layout for links linking feats — as_sublinks","text":"as_sublinks(tbl_df): Convert list tibbles link layout","code":""},{"path":"https://thackl.github.io/gggenomes/reference/check_strand.html","id":null,"dir":"Reference","previous_headings":"","what":"Check strand — check_strand","title":"Check strand — check_strand","text":"Check strand","code":""},{"path":"https://thackl.github.io/gggenomes/reference/check_strand.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check strand — check_strand","text":"","code":"check_strand(strand, na)"},{"path":"https://thackl.github.io/gggenomes/reference/check_strand.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check strand — check_strand","text":"strand representation strandedness na use NA","code":""},{"path":"https://thackl.github.io/gggenomes/reference/check_strand.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check strand — check_strand","text":"strand vector unknown values replaced na","code":""},{"path":"https://thackl.github.io/gggenomes/reference/combine_strands.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine strands — combine_strands","title":"Combine strands — combine_strands","text":"Combine strands","code":""},{"path":"https://thackl.github.io/gggenomes/reference/combine_strands.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine strands — combine_strands","text":"","code":"combine_strands(strand, strand2, ...)"},{"path":"https://thackl.github.io/gggenomes/reference/combine_strands.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine strands — combine_strands","text":"strand first strand strand2 second strand ... strands","code":""},{"path":"https://thackl.github.io/gggenomes/reference/combine_strands.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine strands — combine_strands","text":"combined strand","code":""},{"path":"https://thackl.github.io/gggenomes/reference/def_formats.html","id":null,"dir":"Reference","previous_headings":"","what":"Defined file formats and extensions — def_formats","title":"Defined file formats and extensions — def_formats","text":"seamless reading different file formats, gggenomes uses mapping known formats associated file extensions contexts different formats can read. notion context allows one read different information format/extension. example, gbk file holds feature sequence information. read \"feats\" context read_feats(\"*.gbk\") return feature table, read \"seqs\" context read_seqs(\"*.gbk\"), sequence index.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/def_formats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Defined file formats and extensions — def_formats","text":"","code":"def_formats(   file = NULL,   ext = NULL,   context = NULL,   parser = NULL,   allow_na = FALSE )"},{"path":"https://thackl.github.io/gggenomes/reference/def_formats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Defined file formats and extensions — def_formats","text":"file vector file names ext vector file extensions context vector file contexts defined gggenomes_global$def_formats parser vector file parsers defined gggenomes_global$def_formats allow_na boolean","code":""},{"path":"https://thackl.github.io/gggenomes/reference/def_formats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Defined file formats and extensions — def_formats","text":"dictionarish vector file formats recognized extensions names","code":""},{"path":"https://thackl.github.io/gggenomes/reference/def_formats.html","id":"defined-formats-extensions-contexts-and-parsers","dir":"Reference","previous_headings":"","what":"Defined formats, extensions, contexts, and parsers","title":"Defined file formats and extensions — def_formats","text":"","code":"format                           ext            context                                              parser 1  ambigious                 txt, tsv, csv                 NA                                      read_ambigious 2      fasta fa, fas, fasta, ffn, fna, faa               seqs                                        read_seq_len 3        fai                           fai               seqs                                            read_fai 4       gff3          gff, gff3, gff2, gtf        feats, seqs                             read_gff3, read_seq_len 5        gbk           gbk, gb, gbff, gpff        feats, seqs                              read_gbk, read_seq_len 6        bed                           bed              feats                                            read_bed 7      blast                    m8, o6, o7       feats, links                              read_blast, read_blast 8        paf                           paf       feats, links                                  read_paf, read_paf 9      alitv                          json feats, seqs, links read_alitv_genes, read_alitv_seqs, read_alitv_links 10       vcf                           vcf              feats                                            read_vcf"},{"path":"https://thackl.github.io/gggenomes/reference/def_formats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Defined file formats and extensions — def_formats","text":"","code":"# vector of defined zip formats and recognized extensions as names # format of file def_formats(\"foo.fa\") #>      fa  #> \"fasta\"   # formats associated with each extension def_formats(ext = c(\"fa\", \"gff\")) #>      fa     gff  #> \"fasta\"  \"gff3\"   # all formats/extensions that can be read in seqs context; includes formats # that are defined for context=NA, i.e. that can be read in any context. def_formats(context = \"seqs\") #>        json         txt         tsv         csv         fai          fa  #>     \"alitv\" \"ambigious\" \"ambigious\" \"ambigious\"       \"fai\"     \"fasta\"  #>         fas       fasta         ffn         fna         faa         gbk  #>     \"fasta\"     \"fasta\"     \"fasta\"     \"fasta\"     \"fasta\"       \"gbk\"  #>          gb        gbff        gpff         gff        gff3        gff2  #>       \"gbk\"       \"gbk\"       \"gbk\"      \"gff3\"      \"gff3\"      \"gff3\"  #>         gtf  #>      \"gff3\""},{"path":"https://thackl.github.io/gggenomes/reference/def_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Default column names and types for defined formats — def_names","title":"Default column names and types for defined formats — def_names","text":"Intended used readr::read_tsv()-like functions accept col_names col_types argument.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/def_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default column names and types for defined formats — def_names","text":"","code":"def_names(format)  def_types(format)"},{"path":"https://thackl.github.io/gggenomes/reference/def_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default column names and types for defined formats — def_names","text":"format specify format known gggenomes, gff3, gbk, ...","code":""},{"path":"https://thackl.github.io/gggenomes/reference/def_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default column names and types for defined formats — def_names","text":"vector default column names given format vector default column types given format","code":""},{"path":"https://thackl.github.io/gggenomes/reference/def_names.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Default column names and types for defined formats — def_names","text":"def_names(): default column names defined formats def_types(): default column types defined formats","code":""},{"path":"https://thackl.github.io/gggenomes/reference/def_names.html","id":"defined-formats-column-types-and-names","dir":"Reference","previous_headings":"","what":"Defined formats, column types and names","title":"Default column names and types for defined formats — def_names","text":"","code":"gff3       ccciicccc       seq_id,source,type,start,end,score,strand,phase,attributes   paf        ciiicciiiiid    seq_id,length,start,end,strand,seq_id2,length2,start2,end2,map_match,map_length,map_quality   blast      ccdiiiiiiidd    seq_id,seq_id2,pident,length,mismatch,gapopen,start,end,start2,end2,evalue,bitscore   bed        ciicdc          seq_id,start,end,name,score,strand   fai        ci---           seq_id,seq_desc,length   seq_len    cci             seq_id,seq_desc,length   vcf        cicccdccc       seq_id,start,feat_id,ref,alt,qual,filter,info,format"},{"path":"https://thackl.github.io/gggenomes/reference/def_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Default column names and types for defined formats — def_names","text":"","code":"# read a blast-tabular file with read_tsv readr::read_tsv(ex(\"emales/emales-prot-ava.o6\"), col_names = def_names(\"blast\")) #> Rows: 827 Columns: 12 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr  (2): seq_id, seq_id2 #> dbl (10): pident, length, mismatch, gapopen, start, end, start2, end2, evalu... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> # A tibble: 827 × 12 #>    seq_id        seq_id2 pident length mismatch gapopen start   end start2  end2 #>    <chr>         <chr>    <dbl>  <dbl>    <dbl>   <dbl> <dbl> <dbl>  <dbl> <dbl> #>  1 Cflag_017B_0… Cflag_…  1        119        0       0     1   119      1   119 #>  2 Cflag_017B_0… RCC970…  1        119        0       0     1   119      1   119 #>  3 Cflag_017B_0… E4-10_…  0.991    119        1       0     1   119      1   119 #>  4 Cflag_017B_0… BVI_06…  0.991    119        1       0     1   119      1   119 #>  5 Cflag_017B_0… E4-10_…  0.983    119        2       0     1   119      1   119 #>  6 Cflag_017B_0… BVI_00…  0.983    119        2       0     1   119      1   119 #>  7 E4-10_112_00… E4-10_…  1        406        0       0     1   406      1   406 #>  8 E4-10_112_00… E4-10_…  1        406        0       0     1   406      1   406 #>  9 E4-10_112_00… BVI_06…  0.997    406        1       0     1   406      1   406 #> 10 E4-10_112_00… BVI_00…  0.987    406        5       0     1   406      1   406 #> # ℹ 817 more rows #> # ℹ 2 more variables: evalue <dbl>, bitscore <dbl>"},{"path":"https://thackl.github.io/gggenomes/reference/dim.gggenomes_layout.html","id":null,"dir":"Reference","previous_headings":"","what":"ggplot2::facet_null checks data with empty(df) using dim. This causes an error because dim(gggenome_layout) is undefined. Return dim of primary table instead — dim.gggenomes_layout","title":"ggplot2::facet_null checks data with empty(df) using dim. This causes an error because dim(gggenome_layout) is undefined. Return dim of primary table instead — dim.gggenomes_layout","text":"ggplot2::facet_null checks data empty(df) using dim. causes error dim(gggenome_layout) undefined. Return dim primary table instead","code":""},{"path":"https://thackl.github.io/gggenomes/reference/dim.gggenomes_layout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ggplot2::facet_null checks data with empty(df) using dim. This causes an error because dim(gggenome_layout) is undefined. Return dim of primary table instead — dim.gggenomes_layout","text":"","code":"# S3 method for class 'gggenomes_layout' dim(x)"},{"path":"https://thackl.github.io/gggenomes/reference/dim.gggenomes_layout.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ggplot2::facet_null checks data with empty(df) using dim. This causes an error because dim(gggenome_layout) is undefined. Return dim of primary table instead — dim.gggenomes_layout","text":"dim primary table","code":""},{"path":"https://thackl.github.io/gggenomes/reference/drop_feat_layout.html","id":null,"dir":"Reference","previous_headings":"","what":"Drop feature layout — drop_feat_layout","title":"Drop feature layout — drop_feat_layout","text":"Drop feature layout","code":""},{"path":"https://thackl.github.io/gggenomes/reference/drop_feat_layout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Drop feature layout — drop_feat_layout","text":"","code":"drop_feat_layout(x, keep = \"strand\")"},{"path":"https://thackl.github.io/gggenomes/reference/drop_feat_layout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Drop feature layout — drop_feat_layout","text":"x feat_layout keep features keep","code":""},{"path":"https://thackl.github.io/gggenomes/reference/drop_feat_layout.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Drop feature layout — drop_feat_layout","text":"feat_layout without unwanted features","code":""},{"path":"https://thackl.github.io/gggenomes/reference/drop_layout.html","id":null,"dir":"Reference","previous_headings":"","what":"Drop a genome layout — drop_layout","title":"Drop a genome layout — drop_layout","text":"Drop genome layout","code":""},{"path":"https://thackl.github.io/gggenomes/reference/drop_layout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Drop a genome layout — drop_layout","text":"","code":"drop_layout(data, ...)"},{"path":"https://thackl.github.io/gggenomes/reference/drop_layout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Drop a genome layout — drop_layout","text":"data layout ... additional data","code":""},{"path":"https://thackl.github.io/gggenomes/reference/drop_layout.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Drop a genome layout — drop_layout","text":"gggenomes object without layout","code":""},{"path":"https://thackl.github.io/gggenomes/reference/drop_link_layout.html","id":null,"dir":"Reference","previous_headings":"","what":"Drop a link layout — drop_link_layout","title":"Drop a link layout — drop_link_layout","text":"Drop link layout","code":""},{"path":"https://thackl.github.io/gggenomes/reference/drop_link_layout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Drop a link layout — drop_link_layout","text":"","code":"drop_link_layout(x, keep = \"strand\")"},{"path":"https://thackl.github.io/gggenomes/reference/drop_link_layout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Drop a link layout — drop_link_layout","text":"x link_layout keep features keep","code":""},{"path":"https://thackl.github.io/gggenomes/reference/drop_link_layout.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Drop a link layout — drop_link_layout","text":"link_layout without unwanted features","code":""},{"path":"https://thackl.github.io/gggenomes/reference/drop_seq_layout.html","id":null,"dir":"Reference","previous_headings":"","what":"Drop a seq layout — drop_seq_layout","title":"Drop a seq layout — drop_seq_layout","text":"Drop seq layout","code":""},{"path":"https://thackl.github.io/gggenomes/reference/drop_seq_layout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Drop a seq layout — drop_seq_layout","text":"","code":"drop_seq_layout(x, keep = \"strand\")"},{"path":"https://thackl.github.io/gggenomes/reference/drop_seq_layout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Drop a seq layout — drop_seq_layout","text":"x seq_layout keep features keep","code":""},{"path":"https://thackl.github.io/gggenomes/reference/drop_seq_layout.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Drop a seq layout — drop_seq_layout","text":"seq_layout without unwanted features","code":""},{"path":"https://thackl.github.io/gggenomes/reference/emale_ava.html","id":null,"dir":"Reference","previous_headings":"","what":"All-versus-all whole genome alignments of 6 EMALE genomes — emale_ava","title":"All-versus-all whole genome alignments of 6 EMALE genomes — emale_ava","text":"One row per alignment block. Alignments computed minimap2.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/emale_ava.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"All-versus-all whole genome alignments of 6 EMALE genomes — emale_ava","text":"","code":"emale_ava"},{"path":"https://thackl.github.io/gggenomes/reference/emale_ava.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"All-versus-all whole genome alignments of 6 EMALE genomes — emale_ava","text":"data frame 125 rows 23 columns file_id name file data read seq_id identifier sequence feature appears length length sequence start start feature sequence end end feature sequence strand orientation feature relative sequence (+ -) seq_id2 identifier sequence feature appears length2 length sequence start2 start feature sequence end2 end feature sequence map_match, map_length, map_quality, NM, ms, , nn, tp, cm, s1, de, rl, cg see https://github.com/lh3/miniasm/blob/master/PAF.md additional columns","code":""},{"path":"https://thackl.github.io/gggenomes/reference/emale_ava.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"All-versus-all whole genome alignments of 6 EMALE genomes — emale_ava","text":"Derived & bundled data: ex(\"emales/emales.paf\")","code":""},{"path":"https://thackl.github.io/gggenomes/reference/emale_cogs.html","id":null,"dir":"Reference","previous_headings":"","what":"Clusters of orthologs of 6 EMALE proteomes — emale_cogs","title":"Clusters of orthologs of 6 EMALE proteomes — emale_cogs","text":"One row per feature. Clusters based manual curation.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/emale_cogs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clusters of orthologs of 6 EMALE proteomes — emale_cogs","text":"","code":"emale_cogs"},{"path":"https://thackl.github.io/gggenomes/reference/emale_cogs.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Clusters of orthologs of 6 EMALE proteomes — emale_cogs","text":"data frame 48 rows 3 columns cluster_id identifier cluster feat_id identifer gene cluster_size number features cluster","code":""},{"path":"https://thackl.github.io/gggenomes/reference/emale_cogs.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Clusters of orthologs of 6 EMALE proteomes — emale_cogs","text":"Derived & bundled data: ex(\"emales/emales-cogs.tsv\")","code":""},{"path":"https://thackl.github.io/gggenomes/reference/emale_gc.html","id":null,"dir":"Reference","previous_headings":"","what":"Relative GC-content along 6 EMALE genomes — emale_gc","title":"Relative GC-content along 6 EMALE genomes — emale_gc","text":"One row per 50 bp window.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/emale_gc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Relative GC-content along 6 EMALE genomes — emale_gc","text":"","code":"emale_gc"},{"path":"https://thackl.github.io/gggenomes/reference/emale_gc.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Relative GC-content along 6 EMALE genomes — emale_gc","text":"data frame 2856 rows 6 columns file_id name file data read seq_id identifier sequence feature appears start start feature sequence end end feature sequence name name feature score relative GC-content window","code":""},{"path":"https://thackl.github.io/gggenomes/reference/emale_gc.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Relative GC-content along 6 EMALE genomes — emale_gc","text":"Derived & bundled data: ex(\"emales/emales-gc.bed\")","code":""},{"path":"https://thackl.github.io/gggenomes/reference/emale_genes.html","id":null,"dir":"Reference","previous_headings":"","what":"Gene annotations if 6 EMALE genomes (endogenous virophages) — emale_genes","title":"Gene annotations if 6 EMALE genomes (endogenous virophages) — emale_genes","text":"data set containing gene feature annotations 6 endogenous virophages found genomes marine protist Cafeteria burkhardae.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/emale_genes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gene annotations if 6 EMALE genomes (endogenous virophages) — emale_genes","text":"","code":"emale_genes"},{"path":"https://thackl.github.io/gggenomes/reference/emale_genes.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Gene annotations if 6 EMALE genomes (endogenous virophages) — emale_genes","text":"data frame 143 rows 17 columns file_id name file data read seq_id identifier sequence feature appears start start feature sequence end end feature sequence strand reading orientation relative sequence (+ -) type feature type (CDS, mRNA, gene, ...) feat_id unique identifier feature introns list column internal intron start/end positions parent_ids list column parent IDs - feat_id's parent features source source annotation score score annotation phase \"CDS\" features indicates next codon begins relative 5' start width width feature gc_content relative GC-content feature name name feature Note  geom_id identifier telling features plotted items (usually CDS mRNA gene)","code":""},{"path":"https://thackl.github.io/gggenomes/reference/emale_genes.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Gene annotations if 6 EMALE genomes (endogenous virophages) — emale_genes","text":"Publication: doi:10.1101/2020.11.30.404863 Raw data: https://github.com/thackl/cb-emales Derived & bundled data: ex(\"emales/emales.gff\")","code":""},{"path":"https://thackl.github.io/gggenomes/reference/emale_ngaros.html","id":null,"dir":"Reference","previous_headings":"","what":"Integrated Ngaro retrotransposons of 6 EMALE genomes — emale_ngaros","title":"Integrated Ngaro retrotransposons of 6 EMALE genomes — emale_ngaros","text":"Integrated Ngaro retrotransposons 6 EMALE genomes","code":""},{"path":"https://thackl.github.io/gggenomes/reference/emale_ngaros.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Integrated Ngaro retrotransposons of 6 EMALE genomes — emale_ngaros","text":"","code":"emale_ngaros"},{"path":"https://thackl.github.io/gggenomes/reference/emale_ngaros.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Integrated Ngaro retrotransposons of 6 EMALE genomes — emale_ngaros","text":"data frame 3 rows 14 columns file_id name file data read seq_id identifier sequence feature appears start start feature sequence end end feature sequence strand orientation feature relative sequence (+ -) type feature type (CDS, mRNA, gene, ...) feat_id unique identifier feature introns list column internal intron start/end positions parent_ids list column parent IDs - feat_id's parent features source source annotation score score annotation phase \"CDS\" features indicates next codon begins relative 5' start name name feature geom_id identifier telling features plotted items (usually CDS mRNA gene)","code":""},{"path":"https://thackl.github.io/gggenomes/reference/emale_ngaros.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Integrated Ngaro retrotransposons of 6 EMALE genomes — emale_ngaros","text":"Publication: doi:10.1101/2020.11.30.404863 Raw data: https://github.com/thackl/cb-emales Derived & bundled data: ex(\"emales/emales-ngaros.gff\")","code":""},{"path":"https://thackl.github.io/gggenomes/reference/emale_prot_ava.html","id":null,"dir":"Reference","previous_headings":"","what":"All-versus-all alignments 6 EMALE proteomes — emale_prot_ava","title":"All-versus-all alignments 6 EMALE proteomes — emale_prot_ava","text":"One row per alignment. Alignments computed mmseqs2 (blast-like).","code":""},{"path":"https://thackl.github.io/gggenomes/reference/emale_prot_ava.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"All-versus-all alignments 6 EMALE proteomes — emale_prot_ava","text":"","code":"emale_prot_ava"},{"path":"https://thackl.github.io/gggenomes/reference/emale_prot_ava.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"All-versus-all alignments 6 EMALE proteomes — emale_prot_ava","text":"data frame 827 rows 13 columns file_id name file data read feat_id identifier first feature alignment feat_id2 identifier second feature alignment pident, length, mismatch, gapopen, start, end, start2, end2, evalue, bitscore see https://github.com/seqan/lambda/wiki/BLAST-Output-Formats BLAST-tabular format columns","code":""},{"path":"https://thackl.github.io/gggenomes/reference/emale_prot_ava.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"All-versus-all alignments 6 EMALE proteomes — emale_prot_ava","text":"Derived & bundled data: ex(\"emales/emales-prot-ava.o6\")","code":""},{"path":"https://thackl.github.io/gggenomes/reference/emale_seqs.html","id":null,"dir":"Reference","previous_headings":"","what":"Sequence index of 6 EMALE genomes (endogenous virophages) — emale_seqs","title":"Sequence index of 6 EMALE genomes (endogenous virophages) — emale_seqs","text":"data set containing sequence information 6 endogenous virophages found genomes marine protist Cafeteria burkhardae.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/emale_seqs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sequence index of 6 EMALE genomes (endogenous virophages) — emale_seqs","text":"","code":"emale_seqs"},{"path":"https://thackl.github.io/gggenomes/reference/emale_seqs.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sequence index of 6 EMALE genomes (endogenous virophages) — emale_seqs","text":"data frame 6 rows 4 columns file_id name file data read seq_id sequence identifier seq_desc sequence description length length sequence","code":""},{"path":"https://thackl.github.io/gggenomes/reference/emale_seqs.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Sequence index of 6 EMALE genomes (endogenous virophages) — emale_seqs","text":"Publication: doi:10.1101/2020.11.30.404863 Raw data: https://github.com/thackl/cb-emales Derived & bundled data: ex(\"emales/emales.fna\")","code":""},{"path":"https://thackl.github.io/gggenomes/reference/emale_tirs.html","id":null,"dir":"Reference","previous_headings":"","what":"Terminal inverted repeats of 6 EMALE genomes — emale_tirs","title":"Terminal inverted repeats of 6 EMALE genomes — emale_tirs","text":"Terminal inverted repeats 6 EMALE genomes","code":""},{"path":"https://thackl.github.io/gggenomes/reference/emale_tirs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Terminal inverted repeats of 6 EMALE genomes — emale_tirs","text":"","code":"emale_tirs"},{"path":"https://thackl.github.io/gggenomes/reference/emale_tirs.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Terminal inverted repeats of 6 EMALE genomes — emale_tirs","text":"data frame 3 rows 14 columns file_id name file data read seq_id identifier sequence feature appears start start feature sequence end end feature sequence strand reading orientation relative sequence (+ -) type feature type (CDS, mRNA, gene, ...) feat_id unique identifier feature introns list column internal intron start/end positions parent_ids list column parent IDs - feat_id's parent features source source annotation score score annotation phase \"CDS\" features indicates next codon begins relative 5' start name name feature width end-start+1 geom_id identifier telling features plotted items (usually CDS mRNA gene)","code":""},{"path":"https://thackl.github.io/gggenomes/reference/emale_tirs.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Terminal inverted repeats of 6 EMALE genomes — emale_tirs","text":"Publication: doi:10.1101/2020.11.30.404863 Raw data: https://github.com/thackl/cb-emales Derived & bundled data: ex(\"emales/emales-tirs.gff\")","code":""},{"path":"https://thackl.github.io/gggenomes/reference/ex.html","id":null,"dir":"Reference","previous_headings":"","what":"Get path to gggenomes example files — ex","title":"Get path to gggenomes example files — ex","text":"Get path gggenomes example files","code":""},{"path":"https://thackl.github.io/gggenomes/reference/ex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get path to gggenomes example files — ex","text":"","code":"ex(file = NULL)"},{"path":"https://thackl.github.io/gggenomes/reference/ex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get path to gggenomes example files — ex","text":"file name example file","code":""},{"path":"https://thackl.github.io/gggenomes/reference/ex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get path to gggenomes example files — ex","text":"path example file","code":""},{"path":"https://thackl.github.io/gggenomes/reference/flip.html","id":null,"dir":"Reference","previous_headings":"","what":"Flip bins and sequences — flip","title":"Flip bins and sequences — flip","text":"flip flip_seqs reverse-complement specified bins individual sequences features. sync automatically flips bins using heuristic maximizes amount forward strand links neighboring bins.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/flip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flip bins and sequences — flip","text":"","code":"flip(x, ..., .bin_track = seqs)  flip_seqs(x, ..., .bins = everything(), .seq_track = seqs, .bin_track = seqs)  sync(x, link_track = 1, min_support = 0)"},{"path":"https://thackl.github.io/gggenomes/reference/flip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flip bins and sequences — flip","text":"x gggenomes object ... bins sequences flip dplyr::select like syntax (numeric position unquoted expressions) .bin_track, .seq_track using function selector tidyselect::(), specifies track context function evaluated. .bins preselection bins sequences flip. Useful selecting numeric position. sets context selection, example 11th sequences total set might easily described 2nd sequences 3rd bin: flip_seqs(2, .bins=3). link_track link track use flipping bins nicely min_support flip bin least many nucleotides support inversion given orientation","code":""},{"path":"https://thackl.github.io/gggenomes/reference/flip.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flip bins and sequences — flip","text":"gggenomes object flipped bins sequences","code":""},{"path":"https://thackl.github.io/gggenomes/reference/flip.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Flip bins and sequences — flip","text":"details see help vignette: vignette(\"flip\", package = \"gggenomes\")","code":""},{"path":"https://thackl.github.io/gggenomes/reference/flip.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flip bins and sequences — flip","text":"","code":"library(patchwork) p <- gggenomes(genes = emale_genes) +   geom_seq(aes(color = strand), arrow = TRUE) +   geom_link(aes(fill = strand)) +   expand_limits(color = c(\"-\")) +   labs(caption = \"not flipped\") #> No seqs provided, inferring seqs from feats  # nothing flipped p0 <- p %>% add_links(emale_ava)  # flip manually p1 <- p %>%   add_links(emale_ava) %>%   flip(4:6) + labs(caption = \"manually\")  # flip automatically based on genome-genome links p2 <- p %>%   add_links(emale_ava) %>%   sync() + labs(caption = \"genome alignments\") #> Flipping: E4-10_086,E4-10_112,RCC970_016B  # flip automatically based on protein-protein links p3 <- p %>%   add_sublinks(emale_prot_ava) %>%   sync() + labs(caption = \"protein alignments\") #> Transforming sublinks with \"aa2nuc\". Disable with `.transform = \"none\"` #> Flipping: E4-10_086,E4-10_112,RCC970_016B  # flip automatically based on genes linked implicitly by belonging # to the same clusters of orthologs (or any grouping of your choice) p4 <- p %>%   add_clusters(emale_cogs) %>%   sync() + labs(caption = \"shared orthologs\") #> Joining with `by = join_by(feat_id)` #> Flipping: E4-10_086,E4-10_112,RCC970_016B  p0 + p1 + p2 + p3 + p4 + plot_layout(nrow = 1, guides = \"collect\")"},{"path":"https://thackl.github.io/gggenomes/reference/flip_strand.html","id":null,"dir":"Reference","previous_headings":"","what":"Flip strand — flip_strand","title":"Flip strand — flip_strand","text":"Flip strand","code":""},{"path":"https://thackl.github.io/gggenomes/reference/flip_strand.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flip strand — flip_strand","text":"","code":"flip_strand(strand, na = NA)"},{"path":"https://thackl.github.io/gggenomes/reference/flip_strand.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flip strand — flip_strand","text":"strand representation strandedness na use NA","code":""},{"path":"https://thackl.github.io/gggenomes/reference/flip_strand.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flip strand — flip_strand","text":"strand flipped","code":""},{"path":"https://thackl.github.io/gggenomes/reference/focus.html","id":null,"dir":"Reference","previous_headings":"","what":"Show features and regions of interest — focus","title":"Show features and regions of interest — focus","text":"Show loci containing features interest. Loci can either provided predefined regions directly (loci=), constructed automatically based pre-selected features (via ...). Features within max_dist greedily combined locus. locate() adds loci new track can easily visualized. focus() extracts loci parent sequences making new sequence set. sequences locus_id new seq_id.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/focus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show features and regions of interest — focus","text":"","code":"focus(   x,   ...,   .track_id = 2,   .max_dist = 10000,   .expand = 5000,   .overhang = c(\"drop\", \"trim\", \"keep\"),   .locus_id = str_glue(\"{seq_id}_lc{row_number()}\"),   .locus_id_group = seq_id,   .locus_bin = c(\"bin\", \"seq\", \"locus\"),   .locus_score = n(),   .locus_filter = TRUE,   .loci = NULL )  locate(   x,   ...,   .track_id = 2,   .max_dist = 10000,   .expand = 5000,   .locus_id = str_glue(\"{seq_id}_lc{row_number()}\"),   .locus_id_group = .data$seq_id,   .locus_bin = c(\"bin\", \"seq\", \"locus\"),   .locus_score = n(),   .locus_filter = TRUE,   .locus_track = \"loci\" )"},{"path":"https://thackl.github.io/gggenomes/reference/focus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show features and regions of interest — focus","text":"x gggenomes object ... Logical predicates defined terms variables track given .track_id. Multiple conditions combined ‘&’. rows condition evaluates ‘TRUE’ kept. arguments ‘...’ automatically quoted evaluated context data frame. support unquoting splicing. See ‘vignette(\"programming\")’ introduction concepts. .track_id track filter - defaults first feature track, usually \"genes\". Can quoted unquoted string positional argument giving index track among tracks (seqs, feats & links). .max_dist Maximum distance adjacent features included locus, default 10kb. .expand amount nucleotides expand focus around target features. Default 2kb. Give two values different - downstream expansions. .overhang handle features overlapping locus boundaries (including expand). Options \"keep\" , \"trim\" exactly boundaries, \"drop\" features fully included within boundaries. .locus_id, .locus_id_group generate ids new loci eventually become new seq_ids. .locus_bin bin assign new locus . Defaults keeping original binning, can set \"seq\" bin loci originating parent sequence, \"locus\" separate loci individual bins. .locus_score expression evaluated context features combined new locus. Results stored column locus_score. Defaults n(), .e. number features per locus. Set, example, sum(bitscore) sum blast hit bitscore per locus. Usually used conjunction .locus_filter. .locus_filter predicate expression used post-filter identified loci. Set .locus_filter=locus_score >= 3 return loci comprising least 3 target features. .loci data.frame specifying loci directly. Required columns seq_id,start,end. Supersedes .... .locus_track name new track containing identified loci.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/focus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show features and regions of interest — focus","text":"gggenomes object focused desired loci gggenomes object new loci track added","code":""},{"path":"https://thackl.github.io/gggenomes/reference/focus.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Show features and regions of interest — focus","text":"focus(): Identify regions interest zoom locate(): Identify regions interest add new feature track","code":""},{"path":"https://thackl.github.io/gggenomes/reference/focus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show features and regions of interest — focus","text":"","code":"# Let's hunt some defense systems in marine SAGs # read the genomes s0 <- read_seqs(ex(\"gorg/gorg.fna.fai\")) #> Reading 'fai' with `read_fai()`: #> * file_id: gorg.fna [/home/runner/work/_temp/Library/gggenomes/extdata/gorg/gorg.fna.fai] s1 <- s0 %>%   # strip trailing number from contigs to get bins   dplyr::mutate(bin_id = stringr::str_remove(seq_id, \"_\\\\d+$\")) # gene annotations from prokka g0 <- read_feats(ex(\"gorg/gorg.gff.xz\")) #> Reading 'gff3' with `read_gff3()`: #> * file_id: gorg [/home/runner/work/_temp/Library/gggenomes/extdata/gorg/gorg.gff.xz] #> Harmonizing attribute names #> • ID -> feat_id #> • Name -> name #> • eC_number -> e_c_number #> Features read #> # A tibble: 3 × 3 #>   source       type      n #>   <chr>        <chr> <int> #> 1 Aragorn:1.2  tRNA     62 #> 2 Prodigal:2.6 CDS    3268 #> 3 barrnap:0.6  rRNA     10  # best hits to the PADS Arsenal database of prokaryotic defense-system genes # $ mmseqs easy-search gorg.fna pads-arsenal-v1-prf gorg-pads-defense.o6 /tmp \\ #     --greedy-best-hits f0 <- read_feats(ex(\"gorg/gorg-pads-defense.o6\")) #> Reading 'blast' with `read_blast()`: #> * file_id: gorg-pads-defense [/home/runner/work/_temp/Library/gggenomes/extdata/gorg/gorg-pads-defense.o6] f1 <- f0 %>%   # parser system/gene info   tidyr::separate(seq_id2, into = c(\"seq_id2\", \"system\", \"gene\"), sep = \",\") %>%   dplyr::filter(     evalue < 1e-10, # get rid of some spurious hits     # and let's focus just on a few systems for this example     system %in% c(\"CRISPR-CAS\", \"DISARM\", \"GABIJA\", \"LAMASSU\", \"THOERIS\")   )  # plot the distribution of hits across full genomes gggenomes(g0, s1, f1, wrap = 2e5) +   geom_seq() + geom_bin_label() +   scale_color_brewer(palette = \"Dark2\") +   geom_point(aes(x = x, y = y, color = system), data = feats())   # hilight the regions containing hits gggenomes(g0, s1, f1, wrap = 2e5) %>%   locate(.track_id = feats) %>%   identity() +   geom_seq() + geom_bin_label() +   scale_color_brewer(palette = \"Dark2\") +   geom_feat(data = feats(loci), color = \"plum3\") +   geom_point(aes(x = x, y = y, color = system), data = feats()) #> Adding 'loci' track. Plot with `geom_feat(data=feats(loci))`   # zoom in on loci gggenomes(g0, s1, f1, wrap = 5e4) %>%   focus(.track_id = feats) +   geom_seq() + geom_bin_label() +   geom_gene() +   geom_feat(aes(color = system)) +   geom_feat_tag(aes(label = gene)) +   scale_color_brewer(palette = \"Dark2\") #> Showing 36 loci with the following size distribution #> • min: 2500 #> • q25: 6464 #> • med: 9739 #> • q75: 10714 #> • max: 19561"},{"path":"https://thackl.github.io/gggenomes/reference/geom_bin_label.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw bin labels — geom_bin_label","title":"Draw bin labels — geom_bin_label","text":"Put bin labels left sequences. nudge_left adds space relative total bin width label seqs, default 5%. expand_left expands plot left 20% make labels visible.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/geom_bin_label.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw bin labels — geom_bin_label","text":"","code":"geom_bin_label(   mapping = NULL,   data = bins(),   hjust = 1,   size = 3,   nudge_left = 0.05,   expand_left = 0.2,   expand_x = NULL,   expand_aes = NULL,   yjust = 0,   ... )"},{"path":"https://thackl.github.io/gggenomes/reference/geom_bin_label.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw bin labels — geom_bin_label","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). hjust Moves text horizontally size label nudge_left much relative widest bin expand_left much relative widest bin expand_x expand plot include absolute x value expand_aes provide custom aes mappings expansion (advanced) yjust multiline bins set 0.5 center labels bins, 1 align labels bottom. ... arguments passed layer()'s params argument. arguments broadly fall one 4 categories . Notably, arguments position argument, aesthetics required can passed .... Unknown arguments part 4 categories ignored. Static aesthetics mapped scale, fixed value apply layer whole. example, colour = \"red\" linewidth = 3. geom's documentation Aesthetics section lists available options. 'required' aesthetics passed params. Please note passing unmapped aesthetics vectors technically possible, order required length guaranteed parallel input data. constructing layer using stat_*() function, ... argument can used pass parameters geom part layer. example stat_density(geom = \"area\", outline.type = \"\"). geom's documentation lists parameters can accept. Inversely, constructing layer using geom_*() function, ... argument can used pass parameters stat part layer. example geom_area(stat = \"density\", adjust = 0.5). stat's documentation lists parameters can accept. key_glyph argument layer() may also passed .... can one functions described key glyphs, change display layer legend.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/geom_bin_label.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw bin labels — geom_bin_label","text":"Bin labels added text layer/component plot.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/geom_bin_label.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Draw bin labels — geom_bin_label","text":"Set x expand_x absolute position align labels specific location","code":""},{"path":"https://thackl.github.io/gggenomes/reference/geom_bin_label.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draw bin labels — geom_bin_label","text":"","code":"s0 <- read_seqs(list.files(ex(\"cafeteria\"), \"Cr.*\\\\.fa.fai$\", full.names = TRUE)) #> Reading 'fai' with `read_fai()`: #> * file_id: CrBVI.fa [/home/runner/work/_temp/Library/gggenomes/extdata/cafeteria/CrBVI.fa.fai] #> * file_id: CrCflag.fa [/home/runner/work/_temp/Library/gggenomes/extdata/cafeteria/CrCflag.fa.fai] #> * file_id: CrE410P.fa [/home/runner/work/_temp/Library/gggenomes/extdata/cafeteria/CrE410P.fa.fai] #> * file_id: CrRCC970.fa [/home/runner/work/_temp/Library/gggenomes/extdata/cafeteria/CrRCC970.fa.fai] s1 <- s0 %>% dplyr::filter(length > 5e5)  gggenomes(emale_genes) + geom_seq() + geom_gene() +   geom_bin_label() #> No seqs provided, inferring seqs from feats   # make larger labels and extra room on the canvas gggenomes(emale_genes) + geom_seq() + geom_gene() +   geom_bin_label(size = 7, expand_left = .4) #> No seqs provided, inferring seqs from feats   # align labels for wrapped bins: # top gggenomes(seqs = s1, infer_bin_id = file_id, wrap = 5e6) +   geom_seq() + geom_bin_label() + geom_seq_label()   # center gggenomes(seqs = s1, infer_bin_id = file_id, wrap = 5e6) +   geom_seq() + geom_bin_label(yjust = .5) + geom_seq_label()   # bottom gggenomes(seqs = s1, infer_bin_id = file_id, wrap = 5e6) +   geom_seq() + geom_bin_label(yjust = 1) + geom_seq_label()"},{"path":"https://thackl.github.io/gggenomes/reference/geom_feat.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw feats — geom_feat","title":"Draw feats — geom_feat","text":"geom_feat() allows user draw (additional) features plot/graph. example, specific regions within sequence (e.g. transposons, introns, mutation hotspots) can highlighted color, size, etc..","code":""},{"path":"https://thackl.github.io/gggenomes/reference/geom_feat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw feats — geom_feat","text":"","code":"geom_feat(   mapping = NULL,   data = feats(),   stat = \"identity\",   position = \"pile\",   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   ... )"},{"path":"https://thackl.github.io/gggenomes/reference/geom_feat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw feats — geom_feat","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data feat_layout: Uses first data frame stored feats track default. stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation. position describes position different plotted features adjusted. default uses \"pile\", different ggplot2 position adjustments, \"identity \"jitter\" can used well. na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). ... arguments passed layer()'s params argument. arguments broadly fall one 4 categories . Notably, arguments position argument, aesthetics required can passed .... Unknown arguments part 4 categories ignored. Static aesthetics mapped scale, fixed value apply layer whole. example, colour = \"red\" linewidth = 3. geom's documentation Aesthetics section lists available options. 'required' aesthetics passed params. Please note passing unmapped aesthetics vectors technically possible, order required length guaranteed parallel input data. constructing layer using stat_*() function, ... argument can used pass parameters geom part layer. example stat_density(geom = \"area\", outline.type = \"\"). geom's documentation lists parameters can accept. Inversely, constructing layer using geom_*() function, ... argument can used pass parameters stat part layer. example geom_area(stat = \"density\", adjust = 0.5). stat's documentation lists parameters can accept. key_glyph argument layer() may also passed .... can one functions described key glyphs, change display layer legend.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/geom_feat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw feats — geom_feat","text":"ggplot2 layer features.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/geom_feat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Draw feats — geom_feat","text":"geom_feat uses ggplot2::geom_segment hood. result, different aesthetics alpha, linewidth, color, etc. can called upon modify visualization data. default, function uses first feature track.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/geom_feat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draw feats — geom_feat","text":"","code":"# Plotting data from the feats' track with adjusted linewidth and color gggenomes(seqs = emale_seqs, feats = emale_ngaros) +   geom_seq() +   geom_feat(linewidth = 5, color = \"darkred\")   # Geom_feat can be called several times as well, when specified what data should be used gggenomes(seqs = emale_seqs, feats = list(emale_ngaros, emale_tirs)) +   geom_seq() +   geom_feat(linewidth = 5, color = \"darkred\") + # uses first feature track   geom_feat(data = feats(emale_tirs))   # Additional notes to feats can be added with functions such as: geom_feat_note / geom_feat_text gggenomes(seqs = emale_seqs, feats = list(emale_ngaros, emale_tirs)) +   geom_seq() +   geom_feat(color = \"darkred\") +   geom_feat(data = feats(emale_tirs), color = \"darkblue\") +   geom_feat_note(data = feats(emale_ngaros), label = \"repeat region\", size = 4)   # Different position adjustments with a simple dataset exampledata <- tibble::tibble(   seq_id = c(rep(\"A\", 3), rep(\"B\", 3), rep(\"C\", 3)),   start = c(0, 30, 15, 40, 80, 20, 30, 50, 70),   end = c(30, 90, 60, 60, 100, 80, 60, 90, 120) )  gggenomes(feats = exampledata) +   geom_feat(position = \"identity\", alpha = 0.5, linewidth = 0.5) +   geom_bin_label() #> No seqs provided, inferring seqs from feats"},{"path":"https://thackl.github.io/gggenomes/reference/geom_feat_text.html","id":null,"dir":"Reference","previous_headings":"","what":"Add text to genes, features, etc. — geom_feat_text","title":"Add text to genes, features, etc. — geom_feat_text","text":"functions useful labeling features/genes plots. Users call aes(label = ...) (label = ...) define label's text Based function, label placed specific location: geom_..._text() plot text middle feature. geom_..._tag()  plot text top feature, 45 degree angle. geom_..._note() plot text feature left side. ... can either replaced feat gene depending track user wants label. arguments hjust, vjust, angle, nudge_y, user can also manually change position text.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/geom_feat_text.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add text to genes, features, etc. — geom_feat_text","text":"","code":"geom_feat_text(   mapping = NULL,   data = feats(),   stat = \"identity\",   position = \"identity\",   ...,   parse = FALSE,   check_overlap = FALSE,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE )  geom_feat_tag(   mapping = NULL,   data = feats(),   stat = \"identity\",   position = \"identity\",   hjust = 0,   vjust = 0,   angle = 45,   nudge_y = 0.03,   xjust = 0.5,   strandwise = TRUE,   ...,   parse = FALSE,   check_overlap = FALSE,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE )  geom_feat_note(   mapping = NULL,   data = feats(),   stat = \"identity\",   position = \"identity\",   hjust = 0,   vjust = 1,   nudge_y = -0.03,   xjust = 0,   strandwise = FALSE,   ...,   parse = FALSE,   check_overlap = FALSE,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE )  geom_gene_text(   mapping = NULL,   data = genes(),   stat = \"identity\",   position = \"identity\",   ...,   parse = FALSE,   check_overlap = FALSE,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE )  geom_gene_tag(   mapping = NULL,   data = genes(),   stat = \"identity\",   position = \"identity\",   hjust = 0,   vjust = 0,   angle = 45,   nudge_y = 0.03,   xjust = 0.5,   strandwise = TRUE,   ...,   parse = FALSE,   check_overlap = FALSE,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE )  geom_gene_note(   mapping = NULL,   data = genes(),   stat = \"identity\",   position = \"identity\",   hjust = 0,   vjust = 1,   nudge_y = -0.03,   xjust = 0,   strandwise = FALSE,   ...,   parse = FALSE,   check_overlap = FALSE,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE )"},{"path":"https://thackl.github.io/gggenomes/reference/geom_feat_text.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add text to genes, features, etc. — geom_feat_text","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation. position position adjustment use data layer. jointy specified nudge_x nudge_y. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). string nameing position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. ... arguments passed layer()'s params argument. arguments broadly fall one 4 categories . Notably, arguments position argument, aesthetics required can passed .... Unknown arguments part 4 categories ignored. Static aesthetics mapped scale, fixed value apply layer whole. example, colour = \"red\" linewidth = 3. geom's documentation Aesthetics section lists available options. 'required' aesthetics passed params. Please note passing unmapped aesthetics vectors technically possible, order required length guaranteed parallel input data. constructing layer using stat_*() function, ... argument can used pass parameters geom part layer. example stat_density(geom = \"area\", outline.type = \"\"). geom's documentation lists parameters can accept. Inversely, constructing layer using geom_*() function, ... argument can used pass parameters stat part layer. example geom_area(stat = \"density\", adjust = 0.5). stat's documentation lists parameters can accept. key_glyph argument layer() may also passed .... can one functions described key glyphs, change display layer legend. parse TRUE, labels parsed expressions displayed described ?plotmath. check_overlap TRUE, text overlaps previous text layer plotted. check_overlap happens draw time order data. Therefore data arranged label column calling geom_text(). Note argument supported geom_label(). na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). hjust Moves text horizontally vjust Moves text vertically angle Defines angle text placed. *Note nudge_y Moves text vertically entire contig/sequence. (e.g. nudge_y = 1 places text contig ) xjust Move text x direction strandwise plotting feature tags","code":""},{"path":"https://thackl.github.io/gggenomes/reference/geom_feat_text.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add text to genes, features, etc. — geom_feat_text","text":"ggplot2 layer gene text. ggplot2 layer feature tags. ggplot2 layer feature notes. ggplot2 layer gene text. ggplot2 layer gene tags. ggplot2 layer gene notes.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/geom_feat_text.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add text to genes, features, etc. — geom_feat_text","text":"labeling functions use ggplot2::geom_text() hood. changes aesthetics text can performed ggplot2 manner.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/geom_feat_text.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add text to genes, features, etc. — geom_feat_text","text":"","code":"# example data genes <- tibble::tibble(   seq_id = c(\"A\", \"A\", \"A\", \"B\", \"B\", \"C\"),   start = c(20, 40, 80, 30, 10, 60),   end = c(30, 70, 85, 40, 15, 90),   feat_id = c(\"A1\", \"A2\", \"A3\", \"B1\", \"B2\", \"C1\"),   type = c(\"CDS\", \"CDS\", \"CDS\", \"CDS\", \"CDS\", \"CDS\"),   name = c(\"geneA\", \"geneB\", \"geneC\", \"geneA\", \"geneC\", \"geneB\") )  seqs <- tibble::tibble(   seq_id = c(\"A\", \"B\", \"C\"),   start = c(0, 0, 0),   end = c(100, 100, 100),   length = c(100, 100, 100) )  # basic plot creation plot <- gggenomes(seqs = seqs, genes = genes) +   geom_bin_label() +   geom_gene()  # geom_..._text plot + geom_gene_text(aes(label = name))   # geom_..._tag plot + geom_gene_tag(aes(label = name))   # geom_..._note plot + geom_gene_note(aes(label = name))   # with horizontal adjustment (`hjust`), vertical adjustment (`vjust`) plot + geom_gene_text(aes(label = name), vjust = -2, hjust = 1)   # using `nudge_y` and and `angle` adjustment plot + geom_gene_text(aes(label = name), nudge_y = 1, angle = 10)   # labeling with manual input plot + geom_gene_text(label = c(\"This\", \"is\", \"an\", \"example\", \"test\", \"test\"))"},{"path":"https://thackl.github.io/gggenomes/reference/geom_gene.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw gene models — geom_gene","title":"Draw gene models — geom_gene","text":"Draw coding sequences, mRNAs non-coding features. Supports multi-exon features. CDS mRNAs group plotted together. can therefore also positioned single unit using position argument.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/geom_gene.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw gene models — geom_gene","text":"","code":"geom_gene(   mapping = NULL,   data = genes(),   stat = \"identity\",   position = \"identity\",   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   size = 2,   rna_size = size,   shape = size,   rna_shape = shape,   intron_shape = size,   intron_types = c(\"CDS\", \"mRNA\", \"tRNA\", \"tmRNA\", \"ncRNA\", \"rRNA\"),   cds_aes = NULL,   rna_aes = NULL,   intron_aes = NULL,   ... )"},{"path":"https://thackl.github.io/gggenomes/reference/geom_gene.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw gene models — geom_gene","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation. position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. na.rm remove na values show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). size, rna_size size gene model, aka height polygons. rna_size applies non-coding parts gene model, defaults size. shape, rna_shape vector height width arrow tip, defaults size. one value provided recycled. Set '0' deactivates arrow-shaped tips. rna_shape applies non-coding parts gene model, defaults shape. intron_shape single value controlling kink intron line. Defaults size. Set 0 straight lines exons. intron_types introns computed/drawn features types listed . Set \"CDS\" plot mRNAs continous features, set NA completely ignore introns. cds_aes, rna_aes, intron_aes overwrite aesthetics different model parts. Need wrapped ggplot2::aes(). NOTE: remappings applied data transformed mapped plot scales (see ggplot2::after_scale()). need map aesthetic names (data columns) standardized names, .e. British English spelling. mappings can used dynamically change parts gene model. example, change color introns hard-coded \"black\" color used fill CDS specify intron_aes=aes(colour = fill). default, rna_aes remapped aes(fill=colorspace::lighten(fill, .5), colour=colorspace::lighten(colour, .5)) give lighter appearence corresponding CDS color. ... passed layer params","code":""},{"path":"https://thackl.github.io/gggenomes/reference/geom_gene.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw gene models — geom_gene","text":"ggplot2 layer genes.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/geom_gene.html","id":"aesthetics","dir":"Reference","previous_headings":"","what":"Aesthetics","title":"Draw gene models — geom_gene","text":"geom_gene() understands following aesthetics (required aesthetics bold): x xend y alpha colour fill group introns linetype stroke type Learn setting aesthetics vignette(\"ggplot2-specs\"). 'type' 'group' (mapped 'type' 'geom_id' default) power proper recognition CDS corresponding mRNAs can drawn one composite object. Overwrite 'group' plot CDS mRNAs independently. 'introns' (mapped 'introns') used compute intron/exon boundaries. Use parameter intron_types want disable introns.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/geom_gene.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draw gene models — geom_gene","text":"","code":"gggenomes(genes = emale_genes) +   geom_gene() #> No seqs provided, inferring seqs from feats   gggenomes(genes = emale_genes) +   geom_gene(aes(fill = as.numeric(gc_content)), position = \"strand\") +   scale_fill_viridis_b() #> No seqs provided, inferring seqs from feats   g0 <- read_gff3(ex(\"eden-utr.gff\")) #> Harmonizing attribute names #> • ID -> feat_id #> • Name -> name #> • Parent -> parent_ids #> • Target -> target #> Features read #> # A tibble: 8 × 3 #>   source type                n #>   <chr>  <chr>           <int> #> 1 NA     CDS                 5 #> 2 NA     TF_binding_site     1 #> 3 NA     cDNA_match          1 #> 4 NA     exon                5 #> 5 NA     five_prime_UTR      1 #> 6 NA     gene                1 #> 7 NA     mRNA                5 #> 8 NA     three_prime_UTR     1 gggenomes(genes = g0) +   # all features in the \"genes\" regardless of type   geom_feat(data = feats(genes)) +   annotate(\"text\", label = \"geom_feat\", x = -15, y = .9) + xlim(-20, NA) +   # only features in the \"genes\" of geneish type (implicit `data=genes()`)   geom_gene() +   geom_gene_tag(aes(label = ifelse(is.na(type), \"<NA>\", type)), data = genes(.gene_types = NULL)) +   annotate(\"text\", label = \"geom_gene\", x = -15, y = 1) +   # control which types are returned from the track   geom_gene(aes(y = 1.1), data = genes(.gene_types = c(\"CDS\", \"misc_RNA\"))) +   annotate(\"text\", label = \"gene_types\", x = -15, y = 1.1) +   # control which types can have introns   geom_gene(     aes(y = 1.2, yend = 1.2),     data = genes(.gene_types = c(\"CDS\", \"misc_RNA\")),     intron_types = \"misc_RNA\"   ) +   annotate(\"text\", label = \"intron_types\", x = -15, y = 1.2) #> No seqs provided, inferring seqs from feats #> Warning: Ignoring unknown aesthetics: yend   # spliced genes library(patchwork) gg <- gggenomes(genes = g0) #> No seqs provided, inferring seqs from feats gg + geom_gene(position = \"pile\") +   gg + geom_gene(aes(fill = type),     position = \"pile\",     shape = 0, intron_shape = 0, color = \"white\"   ) +   # some fine-control on cds/rna/intron after_scale aesthetics   gg + geom_gene(aes(fill = geom_id),     position = \"pile\",     size = 2, shape = c(4, 3), rna_size = 2, intron_shape = 4, stroke = 0,     cds_aes = aes(fill = \"black\"), rna_aes = aes(fill = fill),     intron_aes = aes(colour = fill, stroke = 2)   ) +   scale_fill_viridis_d() +   # fun with introns   gg + geom_gene(aes(fill = geom_id), position = \"pile\", size = 3, shape = c(4, 4)) +   gg + geom_gene(aes(fill = geom_id),     position = \"pile\", size = 3, shape = c(4, 4),     intron_types = c()   ) +   gg + geom_gene(aes(fill = geom_id),     position = \"pile\", size = 3, shape = c(4, 4),     intron_types = \"CDS\"   )"},{"path":"https://thackl.github.io/gggenomes/reference/geom_gene_label.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw feat/link labels — geom_gene_label","title":"Draw feat/link labels — geom_gene_label","text":"geom_..._label() functions able user plot labels/text individual features /links. Users indicate label features/links specifying label = ... aes(label = ... Position labels can adjusted arguments vjust, hjust, angle, nudge_y, etc. Also check geom_bin_label(), geom_seq_label() geom_feat_text() given resemblance.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/geom_gene_label.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw feat/link labels — geom_gene_label","text":"","code":"geom_gene_label(   mapping = NULL,   data = genes(),   angle = 45,   hjust = 0,   nudge_y = 0.1,   size = 6,   ... )  geom_feat_label(   mapping = NULL,   data = feats(),   angle = 45,   hjust = 0,   nudge_y = 0.1,   size = 6,   ... )  geom_link_label(   mapping = NULL,   data = links(),   angle = 0,   hjust = 0.5,   vjust = 0.5,   size = 4,   repel = FALSE,   ... )"},{"path":"https://thackl.github.io/gggenomes/reference/geom_gene_label.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw feat/link labels — geom_gene_label","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). angle Defines angle text placed. *Note hjust Moves text horizontally nudge_y Moves text vertically entire contig/sequence. (e.g. nudge_y = 1 places text contig ) size label ... arguments passed layer()'s params argument. arguments broadly fall one 4 categories . Notably, arguments position argument, aesthetics required can passed .... Unknown arguments part 4 categories ignored. Static aesthetics mapped scale, fixed value apply layer whole. example, colour = \"red\" linewidth = 3. geom's documentation Aesthetics section lists available options. 'required' aesthetics passed params. Please note passing unmapped aesthetics vectors technically possible, order required length guaranteed parallel input data. constructing layer using stat_*() function, ... argument can used pass parameters geom part layer. example stat_density(geom = \"area\", outline.type = \"\"). geom's documentation lists parameters can accept. Inversely, constructing layer using geom_*() function, ... argument can used pass parameters stat part layer. example geom_area(stat = \"density\", adjust = 0.5). stat's documentation lists parameters can accept. key_glyph argument layer() may also passed .... can one functions described key glyphs, change display layer legend. vjust Moves text vertically repel use ggrepel avoid overlaps","code":""},{"path":"https://thackl.github.io/gggenomes/reference/geom_gene_label.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw feat/link labels — geom_gene_label","text":"Gene labels added text layer/component plot.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/geom_gene_label.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Draw feat/link labels — geom_gene_label","text":"labeling functions use ggplot2::geom_text() hood. changes aesthetics text can performed ggplot2 manner.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/geom_link.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw links between genomes — geom_link","title":"Draw links between genomes — geom_link","text":"Draws connections genomes, genome/gene/protein alignments gene/protein clusters. geom_link() draws links filled polygons, geom_link_line() draws single connecting line. Note default links adjacent genomes computed shown. compute show links genomes, set gggenomes(..., adjacent_only=FALSE).","code":""},{"path":"https://thackl.github.io/gggenomes/reference/geom_link.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw links between genomes — geom_link","text":"","code":"geom_link(   mapping = NULL,   data = links(),   stat = \"identity\",   position = \"identity\",   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   offset = 0.15,   ... )  geom_link_line(   mapping = NULL,   data = links(),   stat = \"identity\",   position = \"identity\",   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   ... )"},{"path":"https://thackl.github.io/gggenomes/reference/geom_link.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw links between genomes — geom_link","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation. position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). offset distance seq center link start. Use two values c(<offset_top>, <offset_bottom>) different top bottom offsets ... arguments passed layer()'s params argument. arguments broadly fall one 4 categories . Notably, arguments position argument, aesthetics required can passed .... Unknown arguments part 4 categories ignored. Static aesthetics mapped scale, fixed value apply layer whole. example, colour = \"red\" linewidth = 3. geom's documentation Aesthetics section lists available options. 'required' aesthetics passed params. Please note passing unmapped aesthetics vectors technically possible, order required length guaranteed parallel input data. constructing layer using stat_*() function, ... argument can used pass parameters geom part layer. example stat_density(geom = \"area\", outline.type = \"\"). geom's documentation lists parameters can accept. Inversely, constructing layer using geom_*() function, ... argument can used pass parameters stat part layer. example geom_area(stat = \"density\", adjust = 0.5). stat's documentation lists parameters can accept. key_glyph argument layer() may also passed .... can one functions described key glyphs, change display layer legend.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/geom_link.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw links between genomes — geom_link","text":"ggplot2 layer links.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/geom_link.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Draw links between genomes — geom_link","text":"function calls upon data stored within link track. Data frames added track seq_id seq_id2 required variables. Optional recommended variables include start, start2, end, end2, bin_id, bin_id2 strand. Note, start/end specified, links created entire contigs seq_id seq_id2.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/geom_link.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draw links between genomes — geom_link","text":"","code":"p0 <- gggenomes(seqs = emale_seqs, links = emale_ava) + geom_seq()  # default links p1 <- p0 + geom_link()  # change offset from seqs and color p2 <- p0 + geom_link(aes(fill = de, color = de), offset = 0.05) +   scale_fill_viridis_b() + scale_colour_viridis_b()  # combine with flip p3 <- p0 |> flip(3, 4, 5) +   geom_link()  # compute & show all links among all genomes # usually not useful and not recommended for large dataset p4 <- gggenomes(links = emale_ava, adjacent_only = FALSE) + geom_link() #> No seqs or feats provided, inferring seqs from links  library(patchwork) # combine plots in one figure p1 + p2 + p3 + p4 + plot_layout(nrow = 1)  q0 <- gggenomes(emale_genes, emale_seqs) |>   add_clusters(emale_cogs) +   geom_seq() + geom_gene() #> Joining with `by = join_by(feat_id)`  # link gene clusters with polygon q1 <- q0 + geom_link(aes(fill = cluster_id))  # link gene clusters with lines q2 <- q0 + geom_link_line(aes(color = cluster_id))  q1 + q2 + plot_layout(nrow = 1, guides = \"collect\")"},{"path":"https://thackl.github.io/gggenomes/reference/geom_seq.html","id":null,"dir":"Reference","previous_headings":"","what":"draw seqs — geom_seq","title":"draw seqs — geom_seq","text":"geom_seq() draws contigs sequence/chromosome supplied seqs track. Several sequences belonging bin plotted next one another. seqs track empty, sequences inferred feats links track respectively. (length sequences can deduced axis typically indicated base pairs.)","code":""},{"path":"https://thackl.github.io/gggenomes/reference/geom_seq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"draw seqs — geom_seq","text":"","code":"geom_seq(mapping = NULL, data = seqs(), arrow = NULL, ...)"},{"path":"https://thackl.github.io/gggenomes/reference/geom_seq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"draw seqs — geom_seq","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data seq_layout: Uses first data frame stored seqs track, default. arrow set non-NULL generate default arrows ... arguments passed layer()'s params argument. arguments broadly fall one 4 categories . Notably, arguments position argument, aesthetics required can passed .... Unknown arguments part 4 categories ignored. Static aesthetics mapped scale, fixed value apply layer whole. example, colour = \"red\" linewidth = 3. geom's documentation Aesthetics section lists available options. 'required' aesthetics passed params. Please note passing unmapped aesthetics vectors technically possible, order required length guaranteed parallel input data. constructing layer using stat_*() function, ... argument can used pass parameters geom part layer. example stat_density(geom = \"area\", outline.type = \"\"). geom's documentation lists parameters can accept. Inversely, constructing layer using geom_*() function, ... argument can used pass parameters stat part layer. example geom_area(stat = \"density\", adjust = 0.5). stat's documentation lists parameters can accept. key_glyph argument layer() may also passed .... can one functions described key glyphs, change display layer legend.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/geom_seq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"draw seqs — geom_seq","text":"Sequence data drawn contigs added layer/component plot.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/geom_seq.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"draw seqs — geom_seq","text":"geom_seq() uses ggplot2::geom_segment() hood. result, different aesthetics alpha, linewidth, color, etc. can called upon modify visualization data. Note: seqs track indicates length/region sequence/contigs plotted. Feats links data falls outside region ignored!","code":""},{"path":"https://thackl.github.io/gggenomes/reference/geom_seq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"draw seqs — geom_seq","text":"","code":"# Simple example of geom_seq gggenomes(seqs = emale_seqs) +   geom_seq() + # creates contigs   geom_bin_label() # labels bins/sequences   # No sequence information supplied, will inform/warn that seqs are inferred from feats. gggenomes(genes = emale_genes) +   geom_seq() + # creates contigs   geom_gene() + # draws genes on top of contigs   geom_bin_label() # labels bins/sequences #> No seqs provided, inferring seqs from feats   # Sequence data controls what sequences and/or regions will be plotted. # Here one sequence is filtered out, Notice that the genes of the removed # sequence are silently ignored and thus not plotted. missing_seqs <- emale_seqs |>   dplyr::filter(seq_id != \"Cflag_017B\") |>   dplyr::arrange(seq_id) # `arrange` to restore alphabetical order.  gggenomes(seqs = missing_seqs, genes = emale_genes) +   geom_seq() + # creates contigs   geom_gene() + # draws genes on top of contigs   geom_bin_label() # labels bins/sequences   # Several sequences belonging to the same *bin* are plotted next to one another seqs <- tibble::tibble(   bin_id = c(\"A\", \"A\", \"A\", \"B\", \"B\", \"B\", \"B\", \"C\", \"C\"),   seq_id = c(\"A1\", \"A2\", \"A3\", \"B1\", \"B2\", \"B3\", \"B4\", \"C1\", \"C2\"),   start = c(0, 100, 200, 0, 50, 150, 250, 0, 400),   end = c(100, 200, 400, 50, 100, 250, 300, 300, 500),   length = c(100, 100, 200, 50, 50, 100, 50, 300, 100) )  gggenomes(seqs = seqs) +   geom_seq() +   geom_bin_label() + # label bins   geom_seq_label() # label individual sequences   # Wrap bins uptill a certain amount. gggenomes(seqs = seqs, wrap = 300) +   geom_seq() +   geom_bin_label() + # label bins   geom_seq_label() # label individual sequences   # Change the space between sequences belonging to one bin gggenomes(seqs = seqs, spacing = 100) +   geom_seq() +   geom_bin_label() + # label bins   geom_seq_label() # label individual sequences"},{"path":"https://thackl.github.io/gggenomes/reference/geom_seq_break.html","id":null,"dir":"Reference","previous_headings":"","what":"Decorate truncated sequences — geom_seq_break","title":"Decorate truncated sequences — geom_seq_break","text":"geom_seq_break() adds decorations ends truncated sequences. arise zooming onto sequence loci focus(), manually annotating sequences start > 1 /end < length.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/geom_seq_break.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Decorate truncated sequences — geom_seq_break","text":"","code":"geom_seq_break(   mapping_start = NULL,   mapping_end = NULL,   data_start = seqs(start > 1),   data_end = seqs(end < length),   label = \"/\",   size = 4,   hjust = 0.75,   family = \"sans\",   stat = \"identity\",   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   ... )"},{"path":"https://thackl.github.io/gggenomes/reference/geom_seq_break.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Decorate truncated sequences — geom_seq_break","text":"mapping_start optional start mapping mapping_end optional end mapping data_start seq_layout sequences decorate start. default: seqs(start >1) data_end seq_layout sequences decorate end. default: seqs(end < length) label character decorate ends . Provide two values different start end decorations, e.g. label=c(\"]\", \"[\"). size text hjust Moves text horizontally family font family text stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation. na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). ... arguments passed layer()'s params argument. arguments broadly fall one 4 categories . Notably, arguments position argument, aesthetics required can passed .... Unknown arguments part 4 categories ignored. Static aesthetics mapped scale, fixed value apply layer whole. example, colour = \"red\" linewidth = 3. geom's documentation Aesthetics section lists available options. 'required' aesthetics passed params. Please note passing unmapped aesthetics vectors technically possible, order required length guaranteed parallel input data. constructing layer using stat_*() function, ... argument can used pass parameters geom part layer. example stat_density(geom = \"area\", outline.type = \"\"). geom's documentation lists parameters can accept. Inversely, constructing layer using geom_*() function, ... argument can used pass parameters stat part layer. example geom_area(stat = \"density\", adjust = 0.5). stat's documentation lists parameters can accept. key_glyph argument layer() may also passed .... can one functions described key glyphs, change display layer legend.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/geom_seq_break.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Decorate truncated sequences — geom_seq_break","text":"ggplot2 layer sequence breaks.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/geom_seq_break.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Decorate truncated sequences — geom_seq_break","text":"","code":"# decorate breaks created with focus() gggenomes(emale_genes, emale_seqs) |>   focus(.expand = 1e3, .max_dist = 1e3) +   geom_seq() + geom_gene() +   geom_seq_break() #> Showing 10 loci with the following size distribution #> • min: 3853 #> • q25: 9284 #> • med: 12695 #> • q75: 18007 #> • max: 21311   # customize decorations gggenomes(emale_genes, emale_seqs) |>   focus(.expand = 1e3, .max_dist = 1e3) +   geom_seq() + geom_gene() +   geom_seq_break(label = c(\"[\", \"]\"), size = 3, color = \"#1b9e77\") #> Showing 10 loci with the following size distribution #> • min: 3853 #> • q25: 9284 #> • med: 12695 #> • q75: 18007 #> • max: 21311   # decorate manually truncated sequences s0 <- tibble::tribble(   # start/end define regions, i.e. truncated contigs   ~bin_id, ~seq_id, ~length, ~start, ~end,   \"complete_genome\", \"chromosome_1_long_trunc_2side\", 1e5, 1e4, 2.1e4,   \"fragmented_assembly\", \"contig_1_trunc_1side\", 1.3e4, .9e4, 1.3e4,   \"fragmented_assembly\", \"contig_2_short_complete\", 0.3e4, 1, 0.3e4,   \"fragmented_assembly\", \"contig_3_trunc_2sides\", 2e4, 1e4, 1.4e4 )  l0 <- tibble::tribble(   ~seq_id, ~start, ~end, ~seq_id2, ~start2, ~end2,   \"chromosome_1_long_trunc_2side\", 1.1e4, 1.4e4,   \"contig_1_trunc_1side\", 1e4, 1.3e4,   \"chromosome_1_long_trunc_2side\", 1.4e4, 1.7e4,   \"contig_2_short_complete\", 1, 0.3e4,   \"chromosome_1_long_trunc_2side\", 1.7e4, 2e4,   \"contig_3_trunc_2sides\", 1e4, 1.3e4 )  gggenomes(seqs = s0, links = l0) +   geom_seq() + geom_link() +   geom_seq_label(nudge_y = -.05) +   geom_seq_break()"},{"path":"https://thackl.github.io/gggenomes/reference/geom_seq_label.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw seq labels — geom_seq_label","title":"Draw seq labels — geom_seq_label","text":"function put labels individual sequence. default plot seq_id label, users able change manually. Position label/text can adjusted different arguments (e.g. vjust, hjust, angle, etc.)","code":""},{"path":"https://thackl.github.io/gggenomes/reference/geom_seq_label.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw seq labels — geom_seq_label","text":"","code":"geom_seq_label(   mapping = NULL,   data = seqs(),   hjust = 0,   vjust = 1,   nudge_y = -0.15,   size = 2.5,   ... )"},{"path":"https://thackl.github.io/gggenomes/reference/geom_seq_label.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw seq labels — geom_seq_label","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). hjust Moves text horizontally vjust Moves text vertically nudge_y Moves text vertically entire contig/sequence. (e.g. nudge_y = 1 places text contig ) size label ... arguments passed layer()'s params argument. arguments broadly fall one 4 categories . Notably, arguments position argument, aesthetics required can passed .... Unknown arguments part 4 categories ignored. Static aesthetics mapped scale, fixed value apply layer whole. example, colour = \"red\" linewidth = 3. geom's documentation Aesthetics section lists available options. 'required' aesthetics passed params. Please note passing unmapped aesthetics vectors technically possible, order required length guaranteed parallel input data. constructing layer using stat_*() function, ... argument can used pass parameters geom part layer. example stat_density(geom = \"area\", outline.type = \"\"). geom's documentation lists parameters can accept. Inversely, constructing layer using geom_*() function, ... argument can used pass parameters stat part layer. example geom_area(stat = \"density\", adjust = 0.5). stat's documentation lists parameters can accept. key_glyph argument layer() may also passed .... can one functions described key glyphs, change display layer legend.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/geom_seq_label.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw seq labels — geom_seq_label","text":"Sequence labels added text layer/component plot.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/geom_seq_label.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Draw seq labels — geom_seq_label","text":"labeling function uses ggplot2::geom_text() hood. changes aesthetics text can performed ggplot2 manner.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/geom_seq_label.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draw seq labels — geom_seq_label","text":"","code":"# example data seqs <- tibble::tibble(   bin_id = c(\"A\", \"A\", \"A\", \"B\", \"B\", \"B\", \"B\", \"C\", \"C\"),   seq_id = c(\"A1\", \"A2\", \"A3\", \"B1\", \"B2\", \"B3\", \"B4\", \"C1\", \"C2\"),   start = c(0, 100, 200, 0, 50, 150, 250, 0, 400),   end = c(100, 200, 400, 50, 100, 250, 300, 300, 500),   length = c(100, 100, 200, 50, 50, 100, 50, 300, 100) )  # example plot using geom_seq_label gggenomes(seqs = seqs) +   geom_seq() +   geom_seq_label()   # changing default label to `length` column gggenomes(seqs = seqs) +   geom_seq() +   geom_seq_label(aes(label = length))   # with horizontal adjustment gggenomes(seqs = seqs) +   geom_seq() +   geom_seq_label(hjust = -5)   # with wrapping at 300 gggenomes(seqs = seqs, wrap = 300) +   geom_seq() +   geom_seq_label()"},{"path":"https://thackl.github.io/gggenomes/reference/geom_variant.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw place of mutation — geom_variant","title":"Draw place of mutation — geom_variant","text":"geom_variant allows user draw points locations mutation occured. Data SNPs, Insertions, Deletions (often stored variant call format (VCF)) can easily visualized way.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/geom_variant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw place of mutation — geom_variant","text":"","code":"geom_variant(   mapping = NULL,   data = feats(),   stat = \"identity\",   position = \"identity\",   geom = \"variant\",   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   offset = 0,   ... )"},{"path":"https://thackl.github.io/gggenomes/reference/geom_variant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw place of mutation — geom_variant","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data Data first feats track used function default. several feats tracks present within gggenomes track system, make sure wanted data used calling data = feats(*df*) within geom_variant function. stat Describes statistical transformation used layer. default uses \"identity\", indicating statistical transformation. position Describes position different plotted features adjusted. default uses \"identity\", different position adjustments, position_variant(), ggplot2' \"jitter\" \"pile\" can used well. geom Describes geom called upon function plotting. default function uses \"variant\", modified geom_point object. larger sequences abundant mutations/variations, recommended use \"ticks\" (modified geom_point object different default shape alpha, plots points small \"ticks\"), theory ggplot2 geom can called well. na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). offset Numeric value describing far points drawn base/sequence. default set offset = 0. ... arguments passed layer()'s params argument. arguments broadly fall one 4 categories . Notably, arguments position argument, aesthetics required can passed .... Unknown arguments part 4 categories ignored. Static aesthetics mapped scale, fixed value apply layer whole. example, colour = \"red\" linewidth = 3. geom's documentation Aesthetics section lists available options. 'required' aesthetics passed params. Please note passing unmapped aesthetics vectors technically possible, order required length guaranteed parallel input data. constructing layer using stat_*() function, ... argument can used pass parameters geom part layer. example stat_density(geom = \"area\", outline.type = \"\"). geom's documentation lists parameters can accept. Inversely, constructing layer using geom_*() function, ... argument can used pass parameters stat part layer. example geom_area(stat = \"density\", adjust = 0.5). stat's documentation lists parameters can accept. key_glyph argument layer() may also passed .... can one functions described key glyphs, change display layer legend.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/geom_variant.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw place of mutation — geom_variant","text":"ggplot2 layer variant information.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/geom_variant.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Draw place of mutation — geom_variant","text":"geom_variant uses ggplot2::geom_point hood. result, different aesthetics alpha, size, color, etc. can called upon modify data visualization. #' function gggenomes::read_feats able read VCF files converts format applicable within gggenomes' track system. Keep mind: function uses data feats' track.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/geom_variant.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draw place of mutation — geom_variant","text":"","code":"# Creation of example data. # (Note: These are mere examples and do not fully resemble data from VCF-files) ## Small example data set f1 <- tibble::tibble(   seq_id = c(rep(c(\"A\", \"B\"), 4)), start = c(1, 10, 15, 15, 30, 40, 40, 50),   end = c(2, 11, 20, 16, 31, 41, 50, 51), length = end - start,   type = c(\"SNP\", \"SNP\", \"Insertion\", \"Deletion\", \"Deletion\", \"SNP\", \"Insertion\", \"SNP\"),   ALT = c(\"A\", \"T\", \"CAT\", \".\", \".\", \"G\", \"GG\", \"G\"),   REF = c(\"C\", \"G\", \"C\", \"A\", \"A\", \"C\", \"G\", \"T\") ) s1 <- tibble::tibble(seq_id = c(\"A\", \"B\"), start = c(0, 0), end = c(55, 55), length = end - start)  ## larger example data set f2 <- tibble::tibble(   seq_id = c(rep(\"A\", 667)),   start = c(     seq(from = 1, to = 500, by = 2),     seq(from = 500, to = 2500, by = 50),     seq(from = 2500, to = 4000, by = 4)   ),   end = start + 1, length = end - start,   type = c(     rep(\"SNP\", 100),     rep(\"Deletion\", 20),     rep(\"SNP\", 180),     rep(\"Deletion\", 67),     rep(\"SNP\", 100),     rep(\"Insertion\", 50),     rep(\"SNP\", 150)   ),   ALT = c(     sample(x = c(\"A\", \"C\", \"G\", \"T\"), size = 100, replace = TRUE),     rep(\".\", 20), sample(x = c(\"A\", \"C\", \"G\", \"T\"), size = 180, replace = TRUE),     rep(\".\", 67), sample(x = c(\"A\", \"C\", \"G\", \"T\"), size = 100, replace = TRUE),     sample(x = c(       \"AA\", \"AC\", \"AG\", \"AT\", \"CA\", \"CC\", \"CG\", \"CT\", \"GA\", \"GC\",       \"GG\", \"GT\", \"TA\", \"TC\", \"TG\", \"TT\"     ), size = 50, replace = TRUE),     sample(x = c(\"A\", \"C\", \"G\", \"T\"), size = 150, replace = TRUE)   ) )  # Basic example plot with geom_variant gggenomes(seqs = s1, feats = f1) +   geom_seq() +   geom_variant()   # Improving plot elements, by changing shape and adding bin_label gggenomes(seqs = s1, feats = f1) +   geom_seq() +   geom_variant(aes(shape = type), offset = -0.1) +   scale_shape_variant() +   geom_bin_label()   # Positional adjustment based on type of mutation: position_variant gggenomes(seqs = s1, feats = f1) +   geom_seq() +   geom_variant(     aes(shape = type),     position = position_variant(offset = c(Insertion = -0.2, Deletion = -0.2, SNP = 0))   ) +   scale_shape_variant() +   geom_bin_label()   # Plotting larger example data set with Changing default geom to # `geom = \"ticks\"` using positional adjustment based on type (`position_variant`) gggenomes(feats = f2) +   geom_variant(aes(color = type), geom = \"ticks\", alpha = 0.4, position = position_variant()) +   geom_bin_label() #> No seqs provided, inferring seqs from feats #> Warning: Some mutation types are not mentioned within the offset argument. These types will have an offset of 0 by default   # Changing geom to `\"text\"`, to plot ALT nucleotides gggenomes(seqs = s1, feats = f1) +   geom_seq() +   geom_variant(aes(shape = type), offset = -0.1) +   scale_shape_variant() +   geom_variant(aes(label = ALT), geom = \"text\", offset = -0.25) +   geom_bin_label() #> Warning: Ignoring unknown aesthetics: type"},{"path":"https://thackl.github.io/gggenomes/reference/geom_wiggle.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw wiggle ribbons or lines — geom_coverage","title":"Draw wiggle ribbons or lines — geom_coverage","text":"Visualize data varies along sequences ribbons, lines, lineranges, etc.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/geom_wiggle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw wiggle ribbons or lines — geom_coverage","text":"","code":"geom_coverage(   mapping = NULL,   data = feats(),   stat = \"coverage\",   geom = \"ribbon\",   position = \"identity\",   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   offset = 0,   height = 0.2,   max = base::max,   ... )  geom_wiggle(   mapping = NULL,   data = feats(),   stat = \"wiggle\",   geom = \"ribbon\",   position = \"identity\",   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   offset = 0,   height = 0.8,   bounds = Hmisc::smedian.hilow,   ... )"},{"path":"https://thackl.github.io/gggenomes/reference/geom_wiggle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw wiggle ribbons or lines — geom_coverage","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation. geom geometric object use display data layer. using stat_*() function construct layer, geom argument can used override default coupling stats geoms. geom argument accepts following: Geom ggproto subclass, example GeomPoint. string naming geom. give geom string, strip function name geom_ prefix. example, use geom_point(), give geom \"point\". information ways specify geom, see layer geom documentation. position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). offset distance seq center wiggle mid/start. height distance plot lowest highest point wiggle data. max geom_coverage uses function base::max default, plots data positive direction. (base::min Can also called input data ) ... arguments passed layer()'s params argument. arguments broadly fall one 4 categories . Notably, arguments position argument, aesthetics required can passed .... Unknown arguments part 4 categories ignored. Static aesthetics mapped scale, fixed value apply layer whole. example, colour = \"red\" linewidth = 3. geom's documentation Aesthetics section lists available options. 'required' aesthetics passed params. Please note passing unmapped aesthetics vectors technically possible, order required length guaranteed parallel input data. constructing layer using stat_*() function, ... argument can used pass parameters geom part layer. example stat_density(geom = \"area\", outline.type = \"\"). geom's documentation lists parameters can accept. Inversely, constructing layer using geom_*() function, ... argument can used pass parameters stat part layer. example geom_area(stat = \"density\", adjust = 0.5). stat's documentation lists parameters can accept. key_glyph argument layer() may also passed .... can one functions described key glyphs, change display layer legend. bounds geom_wiggle uses mid, low high boundary values plotting wiggle data. Can function vector returning three values. Defaults Hmisc::smedian.hilow.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/geom_wiggle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw wiggle ribbons or lines — geom_coverage","text":"ggplot2 layer coverage information.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/geom_wiggle.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Draw wiggle ribbons or lines — geom_coverage","text":"Geom_wiggle plots wiggle data directions around median. Geom_coverage plots data positive direction. functions use data feats' track.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/geom_wiggle.html","id":"aesthetics","dir":"Reference","previous_headings":"","what":"Aesthetics","title":"Draw wiggle ribbons or lines — geom_coverage","text":"geom_wiggle() geom_coverage() understand aesthetics depending chosen underlying ggplot geom, default ggplot2::geom_ribbon(). options play well example ggplot2::geom_line(), ggplot2::geom_linerange(), ggplot2::geom_point(). required aesthetic : z","code":""},{"path":"https://thackl.github.io/gggenomes/reference/geom_wiggle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draw wiggle ribbons or lines — geom_coverage","text":"","code":"# Plotting data with geom_coverage with increased height. gggenomes(seqs = emale_seqs, feats = emale_gc) +   geom_coverage(aes(z = score), height = 0.5) +   geom_seq() #> coverage max #> • max: 0.88   # In opposite direction by calling base::min and taking the negative values of \"score\" gggenomes(seqs = emale_seqs, feats = emale_gc) +   geom_coverage(aes(z = -score), max = base::min, height = 0.5) +   geom_seq() #> coverage max #> • max: -0.88   # GC-content plotted as points with variable color in geom_coverage gggenomes(seqs = emale_seqs, feats = emale_gc) +   geom_coverage(aes(z = score, color = score), height = 0.5, geom = \"point\") +   geom_seq() #> coverage max #> • max: 0.88  # Plot varying GC-content along sequences as ribbon gggenomes(seqs = emale_seqs, feats = emale_gc) +   geom_wiggle(aes(z = score)) +   geom_seq() #> wiggle bounds #> • mid:  0.38 #> • low:  0.2 #> • high: 0.76   # customize color and position gggenomes(genes = emale_genes, seqs = emale_seqs, feats = emale_gc) +   geom_wiggle(aes(z = score), fill = \"lavenderblush3\", offset = -.3, height = .5) +   geom_seq() + geom_gene() #> wiggle bounds #> • mid:  0.38 #> • low:  0.2 #> • high: 0.76   # GC-content as line and with variable color gggenomes(seqs = emale_seqs, feats = emale_gc) +   geom_wiggle(aes(z = score, color = score), geom = \"line\", bounds = c(.5, 0, 1)) +   geom_seq() +   scale_colour_viridis_b(option = \"A\") #> wiggle bounds #> • mid:  0.5 #> • low:  0 #> • high: 1   # or as lineranges gggenomes(seqs = emale_seqs, feats = emale_gc) +   geom_wiggle(aes(z = score, color = score), geom = \"linerange\") +   geom_seq() +   scale_colour_viridis_b(option = \"A\") #> wiggle bounds #> • mid:  0.38 #> • low:  0.2 #> • high: 0.76"},{"path":"https://thackl.github.io/gggenomes/reference/get_seqs.html","id":null,"dir":"Reference","previous_headings":"","what":"Get/set the seqs track — get_seqs","title":"Get/set the seqs track — get_seqs","text":"Get/set seqs track","code":""},{"path":"https://thackl.github.io/gggenomes/reference/get_seqs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get/set the seqs track — get_seqs","text":"","code":"get_seqs(x)  set_seqs(x, value)"},{"path":"https://thackl.github.io/gggenomes/reference/get_seqs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get/set the seqs track — get_seqs","text":"x gggenomes gggenomes_layout objekt value set seqs","code":""},{"path":"https://thackl.github.io/gggenomes/reference/get_seqs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get/set the seqs track — get_seqs","text":"gggenomes_layout track tibble","code":""},{"path":"https://thackl.github.io/gggenomes/reference/gggenomes.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot genomes, features and synteny maps — gggenomes","title":"Plot genomes, features and synteny maps — gggenomes","text":"gggenomes() initializes gggenomes-flavored ggplot object. used declare input data gggenomes' track system. (See details track system, gggenomes vignette Details/Arguments section)","code":""},{"path":"https://thackl.github.io/gggenomes/reference/gggenomes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot genomes, features and synteny maps — gggenomes","text":"","code":"gggenomes(   genes = NULL,   seqs = NULL,   feats = NULL,   links = NULL,   .id = \"file_id\",   spacing = 0.05,   wrap = NULL,   adjacent_only = TRUE,   infer_bin_id = seq_id,   infer_start = min(start, end),   infer_end = max(start, end),   infer_length = max(start, end),   theme = c(\"clean\", NULL),   .layout = NULL,   ... )"},{"path":"https://thackl.github.io/gggenomes/reference/gggenomes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot genomes, features and synteny maps — gggenomes","text":"genes, feats data.frame, list data.frames, character vector paths files containing gene data. item added feature track. single data.frame track_id \"genes\" \"feats\", respectively. list, track_ids parsed list names, names missing name variable containing data.frame. Data columns: required: seq_id,start,end recognized: strand,bin_id,feat_id,introns seqs data.frame character vector paths files containing sequence data. Data columns: required: seq_id,length recognized: bin_id,start,end,strand links data.frame character vector paths files containing link data. item added links track. Data columns: required: seq_id,seq_id2 recognized: start,end,bin_id,start2,end2,bin_id2,strand .id name column file labels created reading directly files. Defaults \"file_id\". Set \"bin_id\" every file represents different bin. spacing sequences bases (>1) relative longest bin (<1) wrap wrap bins multiple lines many nucleotides per lin. adjacent_only Indicates whether links created adjacent sequences/chromosomes . default set adjacent_only = TRUE. FALSE, links created sequences (recommended large data sets) infer_length, infer_start, infer_end, infer_bin_id used infer pseudo seqs feats links provided, bin_id column provided. expressions evaluated context first feat link track. default subregions sequences first last feat/link generated. Set infer_start 0 show sequences true beginning. theme choose gggenomes default theme, NULL omit. .layout pre-computed layout layout_genomes(). Useful developmental purposes. ... additional parameters, passed layout","code":""},{"path":"https://thackl.github.io/gggenomes/reference/gggenomes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot genomes, features and synteny maps — gggenomes","text":"gggenomes-flavored ggplot object","code":""},{"path":"https://thackl.github.io/gggenomes/reference/gggenomes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot genomes, features and synteny maps — gggenomes","text":"gggenomes::gggenomes() resembles functionality ggplot2::ggplot(). used construct initial plot object, often followed \"+\" add components plot (e.g. \"+ geom_gene()\"). big difference two gggenomes multi-track setup ('seqs', 'feats', 'genes' 'links'). gggenomes() pre-computes layout adds coordinates (y,x,xend) data frame prior actual plot construction. implications usage gggenomes: Data frames tracks required variables. predefined variables used import compute x/y coordinates (see arguments). gggenomes' geoms can often used without explicit aes() mappings  works always know names plot variables ahead time: originate pre-computed layout, can use information set sensible default aesthetic mappings cases.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/gggenomes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot genomes, features and synteny maps — gggenomes","text":"","code":"# Compare the genomic organization of three viral elements # EMALEs: endogenous mavirus-like elements (example data shipped with gggenomes) gggenomes(emale_genes, emale_seqs, emale_tirs, emale_ava) +   geom_seq() + geom_bin_label() + # chromosomes and labels   geom_feat(size = 8) + # terminal inverted repeats   geom_gene(aes(fill = strand), position = \"strand\") + # genes   geom_link(offset = 0.15) # synteny-blocks #> Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0. #> ℹ Please use `linewidth` instead.   # with some more information gggenomes(emale_genes, emale_seqs, emale_tirs, emale_ava) %>%   add_feats(emale_ngaros, emale_gc) %>%   add_clusters(emale_cogs) %>%   sync() +   geom_link(offset = 0.15, color = \"white\") + # synteny-blocks   geom_seq() + geom_bin_label() + # chromosomes and labels   # thistle4, salmon4, burlywood4   geom_feat(size = 6, position = \"identity\") + # terminal inverted repeats   geom_feat(     data = feats(emale_ngaros), color = \"turquoise4\", alpha = .3,     position = \"strand\", size = 16   ) +   geom_feat_note(aes(label = type),     data = feats(emale_ngaros),     position = \"strand\", nudge_y = .3   ) +   geom_gene(aes(fill = cluster_id), position = \"strand\") + # genes   geom_wiggle(aes(z = score, linetype = \"GC-content\"), feats(emale_gc),     fill = \"lavenderblush4\", position = position_nudge(y = -.2), height = .2   ) +   scale_fill_brewer(\"Conserved genes\", palette = \"Dark2\", na.value = \"cornsilk3\") #> Joining with `by = join_by(feat_id)` #> Flipping: Cflag_017B,BVI_069,BVI_008A #> wiggle bounds #> • mid:  0.38 #> • low:  0.2 #> • high: 0.76   # initialize plot directly from files gggenomes(   ex(\"emales/emales.gff\"),   ex(\"emales/emales.gff\"),   ex(\"emales/emales-tirs.gff\"),   ex(\"emales/emales.paf\") ) + geom_seq() + geom_gene() + geom_feat() + geom_link() #> Reading 'gff3' with `read_gff3()`: #> * file_id: emales [/home/runner/work/_temp/Library/gggenomes/extdata/emales/emales.gff] #> Harmonizing attribute names #> • ID -> feat_id #> • Name -> name #> • Note -> note #> Features read #> # A tibble: 1 × 3 #>   source type      n #>   <chr>  <chr> <int> #> 1 MFG    CDS     143 #> Reading 'gff3' with `read_gff3()`: #> * file_id: emales-tirs [/home/runner/work/_temp/Library/gggenomes/extdata/emales/emales-tirs.gff] #> Harmonizing attribute names #> • ID -> feat_id #> • Name -> name #> Features read #> # A tibble: 1 × 3 #>   source type              n #>   <chr>  <chr>         <int> #> 1 MFG    repeat_region    12 #> Reading 'paf' with `read_paf()`: #> * file_id: emales [/home/runner/work/_temp/Library/gggenomes/extdata/emales/emales.paf] #> Warning: Found tags in max_tags column, you should increase max_tags to #> Read and tidied up a .paf file with 10 optional tag fields: #> NM, ms, AS, nn, tp, cm, s1, de, rl, cg #> Note: warnings about fewer than expected columns are expected for this format. #> Note: .paf files use 0-based coordinate starts - transforming to 1-based #> Reading 'gff3' with `read_seq_len()`: #> * file_id: emales [/home/runner/work/_temp/Library/gggenomes/extdata/emales/emales.gff]   # multi-contig genomes wrap to fixed width s0 <- read_seqs(list.files(ex(\"cafeteria\"), \"Cr.*\\\\.fa.fai$\", full.names = TRUE)) #> Reading 'fai' with `read_fai()`: #> * file_id: CrBVI.fa [/home/runner/work/_temp/Library/gggenomes/extdata/cafeteria/CrBVI.fa.fai] #> * file_id: CrCflag.fa [/home/runner/work/_temp/Library/gggenomes/extdata/cafeteria/CrCflag.fa.fai] #> * file_id: CrE410P.fa [/home/runner/work/_temp/Library/gggenomes/extdata/cafeteria/CrE410P.fa.fai] #> * file_id: CrRCC970.fa [/home/runner/work/_temp/Library/gggenomes/extdata/cafeteria/CrRCC970.fa.fai] s1 <- s0 %>% dplyr::filter(length > 5e5) gggenomes(seqs = s1, infer_bin_id = file_id, wrap = 5e6) +   geom_seq() + geom_bin_label() + geom_seq_label()"},{"path":"https://thackl.github.io/gggenomes/reference/ggplot.gggenomes_layout.html","id":null,"dir":"Reference","previous_headings":"","what":"ggplot.default tries to fortify(data) and we don't want that here — ggplot.gggenomes_layout","title":"ggplot.default tries to fortify(data) and we don't want that here — ggplot.gggenomes_layout","text":"ggplot.default tries fortify(data) want ","code":""},{"path":"https://thackl.github.io/gggenomes/reference/ggplot.gggenomes_layout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ggplot.default tries to fortify(data) and we don't want that here — ggplot.gggenomes_layout","text":"","code":"# S3 method for class 'gggenomes_layout' ggplot(data, mapping = aes(), ..., environment = parent.frame())"},{"path":"https://thackl.github.io/gggenomes/reference/ggplot.gggenomes_layout.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ggplot.default tries to fortify(data) and we don't want that here — ggplot.gggenomes_layout","text":"ggplot object","code":""},{"path":"https://thackl.github.io/gggenomes/reference/has_vars.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if variables exist in object — has_vars","title":"Check if variables exist in object — has_vars","text":"Returns TRUE variables exists. =TRUE returns TRUE least one variable exists.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/has_vars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if variables exist in object — has_vars","text":"","code":"has_vars(x, vars, any = FALSE)"},{"path":"https://thackl.github.io/gggenomes/reference/has_vars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if variables exist in object — has_vars","text":"x object vars variables test TRUE least one variable exists","code":""},{"path":"https://thackl.github.io/gggenomes/reference/has_vars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if variables exist in object — has_vars","text":"TRUE/FALSE","code":""},{"path":"https://thackl.github.io/gggenomes/reference/if_reverse.html","id":null,"dir":"Reference","previous_headings":"","what":"Vectorised if_else based on strandedness — if_reverse","title":"Vectorised if_else based on strandedness — if_reverse","text":"Vectorised if_else based strandedness","code":""},{"path":"https://thackl.github.io/gggenomes/reference/if_reverse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vectorised if_else based on strandedness — if_reverse","text":"","code":"if_reverse(strand, reverse, forward)"},{"path":"https://thackl.github.io/gggenomes/reference/if_reverse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vectorised if_else based on strandedness — if_reverse","text":"strand vector strandedness information reverse value use reverse elements forward value use forward elements","code":""},{"path":"https://thackl.github.io/gggenomes/reference/if_reverse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Vectorised if_else based on strandedness — if_reverse","text":"vector values based strandedness","code":""},{"path":"https://thackl.github.io/gggenomes/reference/in_range.html","id":null,"dir":"Reference","previous_headings":"","what":"Do numeric values fall into specified ranges? — in_range","title":"Do numeric values fall into specified ranges? — in_range","text":"numeric values fall specified ranges?","code":""},{"path":"https://thackl.github.io/gggenomes/reference/in_range.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Do numeric values fall into specified ranges? — in_range","text":"","code":"in_range(x, left, right, closed = TRUE)"},{"path":"https://thackl.github.io/gggenomes/reference/in_range.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Do numeric values fall into specified ranges? — in_range","text":"x numeric vector values left, right boundary values vectors length x closed wether include (TRUE) exclude (FALSE) endpoints. Provide 2 values different behaviors lower upper boundary, e.g. c(TRUE, FALSE) include lower boundary.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/in_range.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Do numeric values fall into specified ranges? — in_range","text":"logical vector length input","code":""},{"path":"https://thackl.github.io/gggenomes/reference/in_range.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Do numeric values fall into specified ranges? — in_range","text":"","code":"in_range(1:5, 2, 4) #> [1] FALSE  TRUE  TRUE  TRUE FALSE in_range(1:5, 2, 4, closed = c(FALSE, TRUE)) # left-open #> [1] FALSE FALSE  TRUE  TRUE FALSE in_range(1:5, 6:2, 3) # vector of boundaries, single values recycle #> [1] FALSE FALSE  TRUE FALSE FALSE   # plays nicely with dplyr df <- tibble::tibble(x = rep(4, 5), left = 1:5, right = 3:7) dplyr::mutate(df,   closed = in_range(x, left, right, TRUE),   open = in_range(x, left, right, FALSE) ) #> # A tibble: 5 × 5 #>       x  left right closed open  #>   <dbl> <int> <int> <lgl>  <lgl> #> 1     4     1     3 FALSE  FALSE #> 2     4     2     4 TRUE   FALSE #> 3     4     3     5 TRUE   TRUE  #> 4     4     4     6 TRUE   FALSE #> 5     4     5     7 FALSE  FALSE"},{"path":"https://thackl.github.io/gggenomes/reference/introduce.html","id":null,"dir":"Reference","previous_headings":"","what":"Introduce non-existing columns — introduce","title":"Introduce non-existing columns — introduce","text":"Works like dplyr::mutate() without changing existing columns, adding new ones. Useful add possibly missing columns default values.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/introduce.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Introduce non-existing columns — introduce","text":"","code":"introduce(.data, ...)"},{"path":"https://thackl.github.io/gggenomes/reference/introduce.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Introduce non-existing columns — introduce","text":".data data frame, data frame extension (e.g. tibble), lazy data frame (e.g. dbplyr dtplyr). See Methods, , details. ... <data-masking> Name-value pairs. name gives name column output. value can : vector length 1, recycled correct length. vector length current group (whole data frame ungrouped). NULL, remove column. data frame tibble, create multiple columns output.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/introduce.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Introduce non-existing columns — introduce","text":"tibble new columns","code":""},{"path":"https://thackl.github.io/gggenomes/reference/introduce.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Introduce non-existing columns — introduce","text":"","code":"# ensure columns \"y\" and \"z\" exist tibble::tibble(x = 1:3) %>%   introduce(y = \"a\", z = paste0(y, dplyr::row_number())) #> # A tibble: 3 × 3 #>       x y     z     #>   <int> <chr> <chr> #> 1     1 a     a1    #> 2     2 a     a2    #> 3     3 a     a3    # ensure columns \"y\" and \"z\" exist, but do not overwrite \"y\" tibble::tibble(x = 1:3, y = c(\"c\", \"d\", \"e\")) %>%   introduce(y = \"a\", z = paste0(y, dplyr::row_number())) #> # A tibble: 3 × 3 #>       x y     z     #>   <int> <chr> <chr> #> 1     1 c     c1    #> 2     2 d     d2    #> 3     3 e     e3"},{"path":"https://thackl.github.io/gggenomes/reference/is_reverse.html","id":null,"dir":"Reference","previous_headings":"","what":"Check whether strand is reverse — is_reverse","title":"Check whether strand is reverse — is_reverse","text":"Check whether strand reverse","code":""},{"path":"https://thackl.github.io/gggenomes/reference/is_reverse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check whether strand is reverse — is_reverse","text":"","code":"is_reverse(strand, na = FALSE)"},{"path":"https://thackl.github.io/gggenomes/reference/is_reverse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check whether strand is reverse — is_reverse","text":"strand representation strandedness na use NA","code":""},{"path":"https://thackl.github.io/gggenomes/reference/is_reverse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check whether strand is reverse — is_reverse","text":"logical vector indicating whether strand reverse","code":""},{"path":"https://thackl.github.io/gggenomes/reference/layout.html","id":null,"dir":"Reference","previous_headings":"","what":"Re-layout a genome layout — layout","title":"Re-layout a genome layout — layout","text":"Re-layout tracks update scales seqs modified","code":""},{"path":"https://thackl.github.io/gggenomes/reference/layout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Re-layout a genome layout — layout","text":"","code":"layout(x, ...)"},{"path":"https://thackl.github.io/gggenomes/reference/layout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Re-layout a genome layout — layout","text":"x layout ... additional data","code":""},{"path":"https://thackl.github.io/gggenomes/reference/layout.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Re-layout a genome layout — layout","text":"layout updated scales","code":""},{"path":"https://thackl.github.io/gggenomes/reference/layout_genomes.html","id":null,"dir":"Reference","previous_headings":"","what":"Layout genomes — layout_genomes","title":"Layout genomes — layout_genomes","text":"Layout genomes","code":""},{"path":"https://thackl.github.io/gggenomes/reference/layout_genomes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Layout genomes — layout_genomes","text":"","code":"layout_genomes(   seqs = NULL,   genes = NULL,   feats = NULL,   links = NULL,   infer_bin_id = seq_id,   infer_start = min(start, end),   infer_end = max(start, end),   infer_length = max(start, end),   adjacent_only = TRUE,   ... )"},{"path":"https://thackl.github.io/gggenomes/reference/layout_genomes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Layout genomes — layout_genomes","text":"seqs data.frame character vector paths files containing sequence data. Data columns: required: seq_id,length recognized: bin_id,start,end,strand genes, feats data.frame, list data.frames, character vector paths files containing gene data. item added feature track. single data.frame track_id \"genes\" \"feats\", respectively. list, track_ids parsed list names, names missing name variable containing data.frame. Data columns: required: seq_id,start,end recognized: strand,bin_id,feat_id,introns links data.frame character vector paths files containing link data. item added links track. Data columns: required: seq_id,seq_id2 recognized: start,end,bin_id,start2,end2,bin_id2,strand infer_length, infer_start, infer_end, infer_bin_id used infer pseudo seqs feats links provided, bin_id column provided. expressions evaluated context first feat link track. default subregions sequences first last feat/link generated. Set infer_start 0 show sequences true beginning. adjacent_only Indicates whether links created adjacent sequences/chromosomes . default set adjacent_only = TRUE. FALSE, links created sequences (recommended large data sets) ... additional parameters, passed layout","code":""},{"path":"https://thackl.github.io/gggenomes/reference/layout_genomes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Layout genomes — layout_genomes","text":"gggenomes_layout object","code":""},{"path":"https://thackl.github.io/gggenomes/reference/layout_seqs.html","id":null,"dir":"Reference","previous_headings":"","what":"Layout sequences — layout_seqs","title":"Layout sequences — layout_seqs","text":"Layout sequences","code":""},{"path":"https://thackl.github.io/gggenomes/reference/layout_seqs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Layout sequences — layout_seqs","text":"","code":"layout_seqs(   x,   spacing = 0.05,   wrap = NULL,   spacing_style = c(\"regular\", \"center\", \"spread\"),   keep = \"strand\" )"},{"path":"https://thackl.github.io/gggenomes/reference/layout_seqs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Layout sequences — layout_seqs","text":"x seq_layout spacing sequences bases (>1) relative longest bin (<1) wrap wrap bins multiple lines many nucleotides per lin. spacing_style one \"regular\", \"center\", \"spread\" keep keys keep (default: \"strand\")","code":""},{"path":"https://thackl.github.io/gggenomes/reference/layout_seqs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Layout sequences — layout_seqs","text":"tbl_df plot coordinates","code":""},{"path":"https://thackl.github.io/gggenomes/reference/pick.html","id":null,"dir":"Reference","previous_headings":"","what":"Pick bins and seqs by name or position — pick","title":"Pick bins and seqs by name or position — pick","text":"Pick bins seqs show order. Uses dplyr::select()-like syntax, means unquoted genome names, positional arguments selection helpers, tidyselect::starts_with() supported. Renaming supported.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/pick.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pick bins and seqs by name or position — pick","text":"","code":"pick(x, ...)  pick_seqs(x, ..., .bins = everything())  pick_seqs_within(x, ..., .bins = everything())  pick_by_tree(x, tree, infer_bin_id = .data$label)"},{"path":"https://thackl.github.io/gggenomes/reference/pick.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pick bins and seqs by name or position — pick","text":"x gggenomes object ... bins/seqs pick, select-like expression. .bins scope positional arguments, select-like expression, enclose multiple arguments c()! tree phylogenetic tree ggtree::ggtree ape::ape-package-\"phylo\" format. infer_bin_id expression extract bin_ids tree data.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/pick.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pick bins and seqs by name or position — pick","text":"gggenomes object selected bins seqs. gggenomes object selected seqs. gggenomes object selected seqs. gggenomes object seqs selected tree order.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/pick.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Pick bins and seqs by name or position — pick","text":"Use dots select bins sequences (depending function suffix), .bins argument set scope positional arguments. example, pick_seqs(1) pick first sequence first bin, pick_seqs(1, .bins=3) pick first sequence third bin.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/pick.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Pick bins and seqs by name or position — pick","text":"pick(): pick bins bin_id, positional argument (start top) select-helper. pick_seqs(): pick individual seqs seq_id, positional argument (start top left) select-helper. pick_seqs_within(): pick individual seqs modify bins containing seqs, keep rest . pick_by_tree(): align bins leaves given phylogenetic tree.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/pick.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pick bins and seqs by name or position — pick","text":"","code":"s0 <- tibble::tibble(   bin_id = c(\"A\", \"B\", \"B\", \"B\", \"C\", \"C\", \"C\"),   seq_id = c(\"a1\", \"b1\", \"b2\", \"b3\", \"c1\", \"c2\", \"c3\"),   length = c(1e4, 6e3, 2e3, 1e3, 3e3, 3e3, 3e3) )  p <- gggenomes(seqs = s0) + geom_seq(aes(color = bin_id), size = 3) +   geom_bin_label() + geom_seq_label() +   expand_limits(color = c(\"A\", \"B\", \"C\")) p   # remove p %>% pick(-B)   # select and reorder, by ID and position p %>% pick(C, 1)   # use helper function p %>% pick(starts_with(\"B\"))   # pick just some seqs p %>% pick_seqs(1, c3)   # pick with .bin scope p %>% pick_seqs(3:1, .bins = C)   # change seqs in some bins, but keep rest as is p %>% pick_seqs_within(3:1, .bins = B)   # same w/o scope, unaffected bins remain as is p %>% pick_seqs_within(b3, b2, b1)   # Align sequences with and plot next to a phylogenetic tree library(patchwork) # arrange multiple plots library(ggtree) # plot phylogenetic trees #> ggtree v3.14.0 Learn more at https://yulab-smu.top/contribution-tree-data/ #>  #> Please cite: #>  #> S Xu, Z Dai, P Guo, X Fu, S Liu, L Zhou, W Tang, T Feng, M Chen, L #> Zhan, T Wu, E Hu, Y Jiang, X Bo, G Yu. ggtreeExtra: Compact #> visualization of richly annotated phylogenetic data. Molecular Biology #> and Evolution. 2021, 38(9):4039-4042. doi: 10.1093/molbev/msab166 #>  #> Attaching package: ‘ggtree’ #> The following object is masked from ‘package:gggenomes’: #>  #>     flip  # load and plot a phylogenetic tree emale_mcp_tree <- read.tree(ex(\"emales/emales-MCP.nwk\")) t <- ggtree(emale_mcp_tree) + geom_tiplab(align = TRUE, size = 3) +   xlim(0, 0.05) # make room for labels  p <- gggenomes(seqs = emale_seqs, genes = emale_genes) +   geom_seq() + geom_seq() + geom_bin_label()  # plot next to each other, but with # different order in tree and genomes t + p + plot_layout(widths = c(1, 5))   # reorder genomes to match tree order # with a warning caused by mismatch in y-scale expansions t + p %>% pick_by_tree(t) + plot_layout(widths = c(1, 5)) #> Warning: Tree and genomes have different y-scale expansions. This can cause slight misalignments of leaves and sequences. #> Consider adding `+ scale_y_continuous(expand=c(0.01,0.7,0.01,0.7))` to the tree as a fix #> • tree: 0,0.6,0,0.6 #> • bins: 0.01,0.7,0.01,0.7   # extra genomes are dropped with a notification emale_seqs_more <- emale_seqs emale_seqs_more[7, ] <- emale_seqs_more[6, ] emale_seqs_more$seq_id[7] <- \"One more genome\" p <- gggenomes(seqs = emale_seqs_more, genes = emale_genes) +   geom_seq() + geom_seq() + geom_bin_label() t + p %>% pick_by_tree(t) + plot_layout(widths = c(1, 5)) #> Some bin_ids are missing in the tree, will drop those from genomes. #> • One more genome #> Warning: Tree and genomes have different y-scale expansions. This can cause slight misalignments of leaves and sequences. #> Consider adding `+ scale_y_continuous(expand=c(0.01,0.7,0.01,0.7))` to the tree as a fix #> • tree: 0,0.6,0,0.6 #> • bins: 0.01,0.7,0.01,0.7   try({   # no shared ids will cause an error   p <- gggenomes(seqs = tibble::tibble(seq_id = \"foo\", length = 1)) +     geom_seq() + geom_seq() + geom_bin_label()   t + p %>% pick_by_tree(t) + plot_layout(widths = c(1, 5))    # extra leafs in tree will cause an error   emale_seqs_fewer <- slice_head(emale_seqs, n = 4)   p <- gggenomes(seqs = emale_seqs_fewer, genes = emale_genes) +     geom_seq() + geom_seq() + geom_bin_label()   t + p %>% pick_by_tree(t) + plot_layout(widths = c(1, 5)) }) #> Error in pick_by_tree(., t) :  #>   No shared bin_ids between tree and genomes. Check your IDs."},{"path":"https://thackl.github.io/gggenomes/reference/position_strand.html","id":null,"dir":"Reference","previous_headings":"","what":"Stack features — position_strand","title":"Stack features — position_strand","text":"position_strand() offsets forward feats upward reverse feats downward. position_pile() stacks overlapping feats upward. position_strandpile() stacks overlapping feats -/downward based strand. position_sixframe() offsets feats based strand reading frame.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/position_strand.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stack features — position_strand","text":"","code":"position_strand(offset = 0.1, flip = FALSE, grouped = NULL, base = offset/2)  position_pile(offset = 0.1, gap = 1, flip = FALSE, grouped = NULL, base = 0)  position_strandpile(   offset = 0.1,   gap = 1,   flip = FALSE,   grouped = NULL,   base = offset * 1.5 )  position_sixframe(offset = 0.1, flip = FALSE, grouped = NULL, base = offset/2)"},{"path":"https://thackl.github.io/gggenomes/reference/position_strand.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stack features — position_strand","text":"offset Shift overlapping feats /much y-axis. y-axis distance two sequences 1, usually small fraction, 0.1. flip stack downward, stranded versions reverse upward. grouped TRUE feats group stacked single feature. Useful move CDS mRNA one unit. NULL (default) set TRUE data appears contain gene-ish features. base align stack relative sequence. 0 center lowest stack level sequence, 1 put forward/reverse sequence one half offset /sequence line. gap two feats closer together , stacked. Can negative allow small overlaps. NA disables stacking.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/position_strand.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stack features — position_strand","text":"ggproto object used geom_gene().","code":""},{"path":"https://thackl.github.io/gggenomes/reference/position_strand.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stack features — position_strand","text":"","code":"library(patchwork) p <- gggenomes(emale_genes) %>%   pick(3:4) + geom_seq() #> No seqs provided, inferring seqs from feats  f0 <- tibble::tibble(   seq_id = pull_seqs(p)$seq_id[1],   start = 1:20 * 1000,   end = start + 2500,   strand = rep(c(\"+\", \"-\"), length(start) / 2) )  sixframe <- function(x, strand) as.character((x %% 3 + 1) * strand_int(strand))  p1 <- p + geom_gene() p2 <- p + geom_gene(aes(fill = strand), position = \"strand\") p3 <- p + geom_gene(aes(fill = strand), position = position_strand(flip = TRUE, base = 0.2)) p4 <- p + geom_gene(aes(fill = sixframe(x, strand)), position = \"sixframe\") p5 <- p %>% add_feats(f0) + geom_gene() + geom_feat(aes(color = strand)) p6 <- p %>% add_feats(f0) + geom_gene() + geom_feat(aes(color = strand), position = \"strandpile\") p1 + p2 + p3 + p4 + p5 + p6 + plot_layout(ncol = 3, guides = \"collect\") & ylim(2.5, 0.5) #> Scale for y is already present. #> Adding another scale for y, which will replace the existing scale. #> Scale for y is already present. #> Adding another scale for y, which will replace the existing scale. #> Scale for y is already present. #> Adding another scale for y, which will replace the existing scale. #> Scale for y is already present. #> Adding another scale for y, which will replace the existing scale. #> Scale for y is already present. #> Adding another scale for y, which will replace the existing scale. #> Scale for y is already present. #> Adding another scale for y, which will replace the existing scale."},{"path":"https://thackl.github.io/gggenomes/reference/position_variant.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot types of mutations with different offsets — position_variant","title":"Plot types of mutations with different offsets — position_variant","text":"position_variant() allows user plot different mutation types (e.g. del, ins, snps) different offsets base. can especially useful highlight regions certain types mutations higher prevalence. position adjustment relevant analysis/visualization VCF files function geom_variant().","code":""},{"path":"https://thackl.github.io/gggenomes/reference/position_variant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot types of mutations with different offsets — position_variant","text":"","code":"position_variant(offset = c(del = 0.1, snp = 0, ins = -0.1), base = 0)"},{"path":"https://thackl.github.io/gggenomes/reference/position_variant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot types of mutations with different offsets — position_variant","text":"offset Shifts data /based type mutation. default offset = c(del=0.1, snp=0, ins=-0.1). user can supply vector offset indicate offsets different mutation types plotted. Types mutations specified within vector, plotted offset 0. base align offsets relative sequence. base = 0, plotting offsets starts sequence. base thus moves entire feature /.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/position_variant.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot types of mutations with different offsets — position_variant","text":"ggproto object used geom_variant().","code":""},{"path":"https://thackl.github.io/gggenomes/reference/position_variant.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot types of mutations with different offsets — position_variant","text":"","code":"# Creation of example data. testposition <- tibble::tibble(   type = c(\"ins\", \"snp\", \"snp\", \"del\", \"del\", \"snp\", \"snp\", \"ins\", \"snp\", \"ins\", \"snp\"),   start = c(10, 20, 30, 35, 40, 60, 65, 90, 90, 100, 120),   end = start + 1,   seq_id = c(rep(\"A\", 11)) ) testseq <- tibble::tibble(   seq_id = \"A\",   start = 0,   end = 150,   length = end - start )  p <- gggenomes(seqs = testseq, feats = testposition)  # This first plot shows what is being plotted when only geom_variant is called p + geom_variant()   # Next lets use position_variant, and change the shape aesthetic by column `type` p + geom_variant(aes(shape = type), position = position_variant())   # Now lets create a plot with different offsets by inserting a self-created vector. p + geom_variant(   aes(shape = type),   position = position_variant(c(del = 0.4, ins = -0.4)) ) + scale_shape_variant() #> Warning: Some mutation types are not mentioned within the offset argument. These types will have an offset of 0 by default #> Warning: No shared levels found between `names(values)` of the manual scale and the #> data's shape values. #> Warning: No shared levels found between `names(values)` of the manual scale and the #> data's shape values. #> Warning: Removed 11 rows containing missing values or values outside the scale range #> (`geom_variant()`).   # Changing the base will shift all points up/down relatively from the sequence. p + geom_variant(   aes(shape = type),   position = position_variant(base = 0.5) ) + geom_seq()"},{"path":"https://thackl.github.io/gggenomes/reference/pull_track.html","id":null,"dir":"Reference","previous_headings":"","what":"Use tracks inside and outside geom_* calls — feats","title":"Use tracks inside and outside geom_* calls — feats","text":"Track selection works like dplyr::pull() supports unquoted ids positional arguments. ... can used subset data dplyr::filter() fashion. pull-prefixed variants return specified track gggenome object. Unprefixed variants work inside geom_* calls.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/pull_track.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use tracks inside and outside geom_* calls — feats","text":"","code":"feats(.track_id = 1, ..., .ignore = \"genes\", .geneify = FALSE)  feats0(.track_id = 1, ..., .ignore = NA, .geneify = FALSE)  genes(..., .gene_types = c(\"CDS\", \"mRNA\", \"tRNA\", \"tmRNA\", \"ncRNA\", \"rRNA\"))  links(.track_id = 1, ..., .ignore = NULL, .adjacent_only = NULL)  seqs(...)  bins(..., .group = vars())  track(.track_id = 1, ..., .track_type = NULL, .ignore = NULL)  pull_feats(.x, .track_id = 1, ..., .ignore = \"genes\", .geneify = FALSE)  pull_genes(   .x,   ...,   .gene_types = c(\"CDS\", \"mRNA\", \"tRNA\", \"tmRNA\", \"ncRNA\", \"rRNA\") )  pull_links(.x, .track_id = 1, ..., .ignore = NULL, .adjacent_only = NULL)  pull_seqs(.x, ...)  pull_bins(.x, ..., .group = vars())  # S3 method for class 'gggenomes_layout' pull_bins(.x, ..., .group = vars())  pull_track(.x, .track_id = 1, ..., .track_type = NULL, .ignore = NULL)"},{"path":"https://thackl.github.io/gggenomes/reference/pull_track.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use tracks inside and outside geom_* calls — feats","text":".track_id track pull , either literal variable name positive/negative integer giving position left/right. ... Logical predicates passed dplyr::filter. \"seqs\", \"feats\", \"links\". Affects position-based selection. .ignore track names ignore selecting position. Default \"genes\", using feats0 defaults NA. .geneify add dummy type, introns geom_id column play nicely geoms supporting multi-level spliced gene models. .gene_types return feats type (type %% .gene_types) .adjacent_only filter links connecting direct neighbors (abs(y-yend)==1)) .group variables use grouping bins seqs addition y bin_id. Use get additional shared variables seqs table bins table. .track_type restrict types tracks - combination \"seqs\", \"feats\", \"links\". .x gggenomes gggenomes_layout object.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/pull_track.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use tracks inside and outside geom_* calls — feats","text":"function pulls specified track gggenomes object. function pulls specified track gggenomes object. function pulls specified track gggenomes object. function pulls specified track gggenomes object. function pulls specified track gggenomes object. function pulls specified track gggenomes object. function pulls specified track gggenomes object.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/pull_track.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Use tracks inside and outside geom_* calls — feats","text":"feats(): default pulls first feat track named \"genes\". feats0(): default pulls first feat track. genes(): pulls first feat track (genes), filtering records type==\"CDS\", adding dummy gene_id column missing play nice multi-exon geoms. links(): default pulls first link track. seqs(): pulls seqs track (one). bins(): pulls binwise summary table seqs data powering geom_bin_*() calls. bin table real track, recomputed --fly. track(): pulls tracks order seqs, feats, links.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/pull_track.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use tracks inside and outside geom_* calls — feats","text":"","code":"gg <- gggenomes(emale_genes, emale_seqs, emale_tirs, emale_ava) gg %>% track_info() # info about track ids, positions and types #> # A tibble: 4 × 4 #> # Groups:   type [3] #>   id    type      i     n #>   <chr> <chr> <int> <int> #> 1 seqs  seqs      1     6 #> 2 genes feats     1   143 #> 3 feats feats     2    12 #> 4 links links     1    38  # get first feat track that isn't \"genes\" (all equivalent) gg %>% pull_feats() # easiest #> # A tibble: 12 × 20 #>        y     x  xend bin_id      seq_id start   end file_id strand type  feat_id #>    <int> <dbl> <dbl> <chr>       <chr>  <int> <int> <chr>   <chr>  <chr> <chr>   #>  1     2     0   473 BVI_008A    BVI_0…     1   473 emales… +      repe… BVI_00… #>  2     2 26820 26347 BVI_008A    BVI_0… 26348 26820 emales… -      repe… BVI_00… #>  3     3     0   488 BVI_069     BVI_0…     1   488 emales… +      repe… BVI_06… #>  4     3 26808 26320 BVI_069     BVI_0… 26321 26808 emales… -      repe… BVI_06… #>  5     4     0  1081 Cflag_017B  Cflag…     1  1081 emales… +      repe… Cflag_… #>  6     4 21311 20230 Cflag_017B  Cflag… 20231 21311 emales… -      repe… Cflag_… #>  7     5     0   319 E4-10_086   E4-10…     1   319 emales… +      repe… E4-10_… #>  8     5 20642 20323 E4-10_086   E4-10… 20324 20642 emales… -      repe… E4-10_… #>  9     1     0   458 E4-10_112   E4-10…     1   458 emales… +      repe… E4-10_… #> 10     1 26856 26398 E4-10_112   E4-10… 26399 26856 emales… -      repe… E4-10_… #> 11     6     0   454 RCC970_016B RCC97…     1   454 emales… +      repe… RCC970… #> 12     6 20152 19698 RCC970_016B RCC97… 19699 20152 emales… -      repe… RCC970… #> # ℹ 9 more variables: introns <list>, parent_ids <list>, source <chr>, #> #   score <chr>, phase <int>, name <chr>, width <chr>, geom_id <chr>, #> #   .marginal <lgl> gg %>% pull_feats(feats) # by id #> # A tibble: 12 × 20 #>        y     x  xend bin_id      seq_id start   end file_id strand type  feat_id #>    <int> <dbl> <dbl> <chr>       <chr>  <int> <int> <chr>   <chr>  <chr> <chr>   #>  1     2     0   473 BVI_008A    BVI_0…     1   473 emales… +      repe… BVI_00… #>  2     2 26820 26347 BVI_008A    BVI_0… 26348 26820 emales… -      repe… BVI_00… #>  3     3     0   488 BVI_069     BVI_0…     1   488 emales… +      repe… BVI_06… #>  4     3 26808 26320 BVI_069     BVI_0… 26321 26808 emales… -      repe… BVI_06… #>  5     4     0  1081 Cflag_017B  Cflag…     1  1081 emales… +      repe… Cflag_… #>  6     4 21311 20230 Cflag_017B  Cflag… 20231 21311 emales… -      repe… Cflag_… #>  7     5     0   319 E4-10_086   E4-10…     1   319 emales… +      repe… E4-10_… #>  8     5 20642 20323 E4-10_086   E4-10… 20324 20642 emales… -      repe… E4-10_… #>  9     1     0   458 E4-10_112   E4-10…     1   458 emales… +      repe… E4-10_… #> 10     1 26856 26398 E4-10_112   E4-10… 26399 26856 emales… -      repe… E4-10_… #> 11     6     0   454 RCC970_016B RCC97…     1   454 emales… +      repe… RCC970… #> 12     6 20152 19698 RCC970_016B RCC97… 19699 20152 emales… -      repe… RCC970… #> # ℹ 9 more variables: introns <list>, parent_ids <list>, source <chr>, #> #   score <chr>, phase <int>, name <chr>, width <chr>, geom_id <chr>, #> #   .marginal <lgl> gg %>% pull_feats(1) # by position #> # A tibble: 12 × 20 #>        y     x  xend bin_id      seq_id start   end file_id strand type  feat_id #>    <int> <dbl> <dbl> <chr>       <chr>  <int> <int> <chr>   <chr>  <chr> <chr>   #>  1     2     0   473 BVI_008A    BVI_0…     1   473 emales… +      repe… BVI_00… #>  2     2 26820 26347 BVI_008A    BVI_0… 26348 26820 emales… -      repe… BVI_00… #>  3     3     0   488 BVI_069     BVI_0…     1   488 emales… +      repe… BVI_06… #>  4     3 26808 26320 BVI_069     BVI_0… 26321 26808 emales… -      repe… BVI_06… #>  5     4     0  1081 Cflag_017B  Cflag…     1  1081 emales… +      repe… Cflag_… #>  6     4 21311 20230 Cflag_017B  Cflag… 20231 21311 emales… -      repe… Cflag_… #>  7     5     0   319 E4-10_086   E4-10…     1   319 emales… +      repe… E4-10_… #>  8     5 20642 20323 E4-10_086   E4-10… 20324 20642 emales… -      repe… E4-10_… #>  9     1     0   458 E4-10_112   E4-10…     1   458 emales… +      repe… E4-10_… #> 10     1 26856 26398 E4-10_112   E4-10… 26399 26856 emales… -      repe… E4-10_… #> 11     6     0   454 RCC970_016B RCC97…     1   454 emales… +      repe… RCC970… #> 12     6 20152 19698 RCC970_016B RCC97… 19699 20152 emales… -      repe… RCC970… #> # ℹ 9 more variables: introns <list>, parent_ids <list>, source <chr>, #> #   score <chr>, phase <int>, name <chr>, width <chr>, geom_id <chr>, #> #   .marginal <lgl> gg %>% pull_feats(2, .ignore = NULL) # default .ignore=\"genes\" #> # A tibble: 12 × 20 #>        y     x  xend bin_id      seq_id start   end file_id strand type  feat_id #>    <int> <dbl> <dbl> <chr>       <chr>  <int> <int> <chr>   <chr>  <chr> <chr>   #>  1     2     0   473 BVI_008A    BVI_0…     1   473 emales… +      repe… BVI_00… #>  2     2 26820 26347 BVI_008A    BVI_0… 26348 26820 emales… -      repe… BVI_00… #>  3     3     0   488 BVI_069     BVI_0…     1   488 emales… +      repe… BVI_06… #>  4     3 26808 26320 BVI_069     BVI_0… 26321 26808 emales… -      repe… BVI_06… #>  5     4     0  1081 Cflag_017B  Cflag…     1  1081 emales… +      repe… Cflag_… #>  6     4 21311 20230 Cflag_017B  Cflag… 20231 21311 emales… -      repe… Cflag_… #>  7     5     0   319 E4-10_086   E4-10…     1   319 emales… +      repe… E4-10_… #>  8     5 20642 20323 E4-10_086   E4-10… 20324 20642 emales… -      repe… E4-10_… #>  9     1     0   458 E4-10_112   E4-10…     1   458 emales… +      repe… E4-10_… #> 10     1 26856 26398 E4-10_112   E4-10… 26399 26856 emales… -      repe… E4-10_… #> 11     6     0   454 RCC970_016B RCC97…     1   454 emales… +      repe… RCC970… #> 12     6 20152 19698 RCC970_016B RCC97… 19699 20152 emales… -      repe… RCC970… #> # ℹ 9 more variables: introns <list>, parent_ids <list>, source <chr>, #> #   score <chr>, phase <int>, name <chr>, width <chr>, geom_id <chr>, #> #   .marginal <lgl>  # get \"seqs\" track (always track #1) gg %>% pull_seqs() #> # A tibble: 6 × 12 #> # Groups:   bin_id [6] #>       y     x  xend strand seq_id   bin_id length bin_offset start   end file_id #>   <int> <dbl> <dbl> <chr>  <chr>    <chr>   <int>      <dbl> <dbl> <int> <chr>   #> 1     6     0 20152 +      RCC970_… RCC97…  20152          0     1 20152 emales  #> 2     5     0 20642 +      E4-10_0… E4-10…  20642          0     1 20642 emales  #> 3     4     0 21311 +      Cflag_0… Cflag…  21311          0     1 21311 emales  #> 4     3     0 26808 +      BVI_069  BVI_0…  26808          0     1 26808 emales  #> 5     2     0 26820 +      BVI_008A BVI_0…  26820          0     1 26820 emales  #> 6     1     0 26856 +      E4-10_1… E4-10…  26856          0     1 26856 emales  #> # ℹ 1 more variable: seq_desc <chr>  # plot integrated transposons and GC content for some viral genomes gg <- gggenomes(seqs = emale_seqs, feats = list(emale_ngaros, GC = emale_gc)) gg + geom_seq() +   geom_feat(color = \"skyblue\") + # defaults to data=feats()   geom_line(aes(x, y + score - .6, group = y), data = feats(GC), color = \"gray60\")"},{"path":"https://thackl.github.io/gggenomes/reference/qw.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a vector from unquoted words. — qw","title":"Create a vector from unquoted words. — qw","text":"Similar perls qw(), however, R spaces args function call always cause error, qw(foo bar) work. Workaround either single string split spaces, unquoted elements, separated commas.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/qw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a vector from unquoted words. — qw","text":"","code":"qw(x)  qc(...)"},{"path":"https://thackl.github.io/gggenomes/reference/qw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a vector from unquoted words. — qw","text":"x single string elements split whitespace chars. ... Unquated words, separated comma.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/qw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a vector from unquoted words. — qw","text":"vector quoted words.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/qw.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a vector from unquoted words. — qw","text":"Took inspiration stackoverflow/qw github/Jarrett Byrnes","code":""},{"path":"https://thackl.github.io/gggenomes/reference/qw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a vector from unquoted words. — qw","text":"","code":"qw(\"foo bar\") # with a strsplit #> [1] \"foo\" \"bar\" qc(foo, bar) # or unquoted, but with commas #> [1] \"foo\" \"bar\""},{"path":"https://thackl.github.io/gggenomes/reference/read_alitv.html","id":null,"dir":"Reference","previous_headings":"","what":"Read AliTV .json file — read_alitv","title":"Read AliTV .json file — read_alitv","text":"file contains sequences, links (optionally) genes","code":""},{"path":"https://thackl.github.io/gggenomes/reference/read_alitv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read AliTV .json file — read_alitv","text":"","code":"read_alitv(file)"},{"path":"https://thackl.github.io/gggenomes/reference/read_alitv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read AliTV .json file — read_alitv","text":"file path json","code":""},{"path":"https://thackl.github.io/gggenomes/reference/read_alitv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read AliTV .json file — read_alitv","text":"list seqs, genes, links","code":""},{"path":"https://thackl.github.io/gggenomes/reference/read_alitv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read AliTV .json file — read_alitv","text":"","code":"ali <- read_alitv(\"https://alitvteam.github.io/AliTV/d3/data/chloroplasts.json\") gggenomes(ali$genes, ali$seqs, links = ali$links) +   geom_seq() +   geom_bin_label() +   geom_gene(aes(fill = class)) +   geom_link() #> Only saw `type=NA` in genes and will treat everything as `type=\"CDS\"`.  p <- gggenomes(ali$genes, ali$seqs, links = ali$links) +   geom_seq() +   geom_bin_label() +   geom_gene(aes(color = class)) +   geom_link(aes(fill = identity)) +   scale_fill_distiller(palette = \"RdYlGn\", direction = 1) p %>%   flip_seqs(5) %>%   pick_seqs(1, 3, 2, 4, 5, 6, 7, 8) #> Only saw `type=NA` in genes and will treat everything as `type=\"CDS\"`."},{"path":"https://thackl.github.io/gggenomes/reference/read_bed.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a BED file — read_bed","title":"Read a BED file — read_bed","text":"BED files use 0-based coordinate starts, gggenomes uses 1-based start coordinates. BED file coordinates therefore transformed 1-based coordinates import.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/read_bed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a BED file — read_bed","text":"","code":"read_bed(file, col_names = def_names(\"bed\"), col_types = def_types(\"bed\"), ...)"},{"path":"https://thackl.github.io/gggenomes/reference/read_bed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a BED file — read_bed","text":"file Either path file, connection, literal data (either single string raw vector). Files ending .gz, .bz2, .xz, .zip automatically uncompressed. Files starting http://, https://, ftp://, ftps:// automatically downloaded. Remote gz files can also automatically downloaded decompressed. Literal data useful examples tests. recognised literal data, input must either wrapped (), string containing least one new line, vector containing least one string new line. Using value clipboard() read system clipboard. col_names column names use. Defaults def_names(\"bed\") compatible canonical bed files. def_names() can easily combined extra columns: col_names = c(def_names(\"bed\"), \"\", \"things\"). col_types One NULL, cols() specification, string. See vignette(\"readr\") details. NULL, column types inferred guess_max rows input, interspersed throughout file. convenient (fast), robust. guessed types wrong, need increase guess_max supply correct types . Column specifications created list() cols() must contain one column specification column. want read subset columns, use cols_only(). Alternatively, can use compact string representation character represents one column: c = character = integer n = number d = double l = logical f = factor D = date T = date time t = time ? = guess _ - = skip default, reading file without column specification print message showing readr guessed . remove message, set show_col_types = FALSE set options(readr.show_col_types = FALSE). ... additional parameters, passed read_tsv","code":""},{"path":"https://thackl.github.io/gggenomes/reference/read_bed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a BED file — read_bed","text":"tibble","code":""},{"path":"https://thackl.github.io/gggenomes/reference/read_blast.html","id":null,"dir":"Reference","previous_headings":"","what":"Read BLAST tab-separated output — read_blast","title":"Read BLAST tab-separated output — read_blast","text":"Read BLAST tab-separated output","code":""},{"path":"https://thackl.github.io/gggenomes/reference/read_blast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read BLAST tab-separated output — read_blast","text":"","code":"read_blast(   file,   col_names = def_names(\"blast\"),   col_types = def_types(\"blast\"),   comment = \"#\",   swap_query = FALSE,   ... )"},{"path":"https://thackl.github.io/gggenomes/reference/read_blast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read BLAST tab-separated output — read_blast","text":"file Either path file, connection, literal data (either single string raw vector). Files ending .gz, .bz2, .xz, .zip automatically uncompressed. Files starting http://, https://, ftp://, ftps:// automatically downloaded. Remote gz files can also automatically downloaded decompressed. Literal data useful examples tests. recognised literal data, input must either wrapped (), string containing least one new line, vector containing least one string new line. Using value clipboard() read system clipboard. col_names column names use. Defaults def_names(\"blast\") compatible blast tabular output (--outfmt 6/7 blast++ -m8 blast-legacy). def_names() can easily combined extra columns: col_names = c(def_names(\"blast\"), \"\", \"things\"). col_types column types use. Defaults def_types(\"gff3\") (see def_types). comment character swap_query TRUE swap query subject columns using swap_query() import. ... additional parameters, passed read_tsv","code":""},{"path":"https://thackl.github.io/gggenomes/reference/read_blast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read BLAST tab-separated output — read_blast","text":"tibble BLAST output","code":""},{"path":"https://thackl.github.io/gggenomes/reference/read_context.html","id":null,"dir":"Reference","previous_headings":"","what":"Read files in different contexts — read_context","title":"Read files in different contexts — read_context","text":"Powers read_seqs(), read_feats(), read_links()","code":""},{"path":"https://thackl.github.io/gggenomes/reference/read_context.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read files in different contexts — read_context","text":"","code":"read_context(   files,   context,   .id = \"file_id\",   format = NULL,   parser = NULL,   ... )"},{"path":"https://thackl.github.io/gggenomes/reference/read_context.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read files in different contexts — read_context","text":"files files reads. format. many cases, compressed files (.gz, .bz2, .xz, .zip) supported. Similarly, automatic download remote files starting http(s):// ftp(s):// works cases. context context (\"seqs\", \"feats\", \"links\") given format read. .id column name file record read . Defaults \"file_id\". Set \"bin_id\" every file represents different bin. format specify format known gggenomes, gff3, gbk, ... overwrite automatic determination based file extension (see def_formats() full list). parser specify name R function overwrite automatic determination based format, e.g. parser=\"read_tsv\". ... additional arguments passed format-specific read function called line.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/read_context.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read files in different contexts — read_context","text":"tibble combined data files","code":""},{"path":"https://thackl.github.io/gggenomes/reference/read_context.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Read files in different contexts — read_context","text":"read_context(): bla keywords internal","code":""},{"path":"https://thackl.github.io/gggenomes/reference/read_gbk.html","id":null,"dir":"Reference","previous_headings":"","what":"Read genbank files — read_gbk","title":"Read genbank files — read_gbk","text":"Genbank flat files (.gb/.gbk/.gbff) ENA DDBJ equivalents particularly gruesome format. read_gbk() just wrapper around Perl-based gb2gff converter read_gff3().","code":""},{"path":"https://thackl.github.io/gggenomes/reference/read_gbk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read genbank files — read_gbk","text":"","code":"read_gbk(file, sources = NULL, types = NULL, infer_cds_parents = TRUE)"},{"path":"https://thackl.github.io/gggenomes/reference/read_gbk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read genbank files — read_gbk","text":"file Either path file, connection, literal data (either single string raw vector). Files ending .gz, .bz2, .xz, .zip automatically uncompressed. Files starting http://, https://, ftp://, ftps:// automatically downloaded. Remote gz files can also automatically downloaded decompressed. Literal data useful examples tests. recognised literal data, input must either wrapped (), string containing least one new line, vector containing least one string new line. Using value clipboard() read system clipboard. sources return features sources types return features types, e.g. gene, CDS, ... infer_cds_parents infer mRNA parent CDS features based overlapping coordinates. Default TRUE gff2/gtf, FALSE gff3. GFFs properly set, sometimes information missing. Generally, problem, however, geom_gene calls parse parent information determine CDS mRNAs part gene model. Without parent info, mRNA CDS plotted individual features.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/read_gbk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read genbank files — read_gbk","text":"tibble","code":""},{"path":"https://thackl.github.io/gggenomes/reference/read_gff3.html","id":null,"dir":"Reference","previous_headings":"","what":"Read features from GFF3 (and with some limitations GFF2/GTF) files — read_gff3","title":"Read features from GFF3 (and with some limitations GFF2/GTF) files — read_gff3","text":"Files ##FASTA section work result parsing problems lines fasta section. Just ignore warnings, strip fasta section ahead time file.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/read_gff3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read features from GFF3 (and with some limitations GFF2/GTF) files — read_gff3","text":"","code":"read_gff3(   file,   sources = NULL,   types = NULL,   infer_cds_parents = is_gff2,   sort_exons = TRUE,   col_names = def_names(\"gff3\"),   col_types = def_types(\"gff3\"),   keep_attr = FALSE,   fix_augustus_cds = TRUE,   is_gff2 = NULL )"},{"path":"https://thackl.github.io/gggenomes/reference/read_gff3.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read features from GFF3 (and with some limitations GFF2/GTF) files — read_gff3","text":"file Either path file, connection, literal data (either single string raw vector). Files ending .gz, .bz2, .xz, .zip automatically uncompressed. Files starting http://, https://, ftp://, ftps:// automatically downloaded. Remote gz files can also automatically downloaded decompressed. Literal data useful examples tests. recognised literal data, input must either wrapped (), string containing least one new line, vector containing least one string new line. Using value clipboard() read system clipboard. sources return features sources types return features types, e.g. gene, CDS, ... infer_cds_parents infer mRNA parent CDS features based overlapping coordinates. Default TRUE gff2/gtf, FALSE gff3. GFFs properly set, sometimes information missing. Generally, problem, however, geom_gene calls parse parent information determine CDS mRNAs part gene model. Without parent info, mRNA CDS plotted individual features. sort_exons make sure exons/introns appear sorted. Default TRUE. Set FALSE read CDS/exon order exactly present file, less robust, faster allows non-canonical splicing (exon1-exon3-exon2). col_names column names use. Defaults def_names(\"gff3\") (see def_names). col_types column types use. Defaults def_types(\"gff3\") (see def_types). keep_attr keep original attributes column also parsing tag=value pairs tidy columns. fix_augustus_cds true, assume Augustus gff bad CDS IDs need fixing is_gff2 set file gff2 format","code":""},{"path":"https://thackl.github.io/gggenomes/reference/read_gff3.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read features from GFF3 (and with some limitations GFF2/GTF) files — read_gff3","text":"tibble","code":""},{"path":"https://thackl.github.io/gggenomes/reference/read_paf.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a .paf file (minimap/minimap2). — read_paf","title":"Read a .paf file (minimap/minimap2). — read_paf","text":"Read minimap/minimap2 .paf file including optional tagged extra fields. optional fields parsed tidy format, one column per tag.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/read_paf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a .paf file (minimap/minimap2). — read_paf","text":"","code":"read_paf(   file,   max_tags = 20,   col_names = def_names(\"paf\"),   col_types = def_types(\"paf\"),   ... )"},{"path":"https://thackl.github.io/gggenomes/reference/read_paf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a .paf file (minimap/minimap2). — read_paf","text":"file Either path file, connection, literal data (either single string raw vector). Files ending .gz, .bz2, .xz, .zip automatically uncompressed. Files starting http://, https://, ftp://, ftps:// automatically downloaded. Remote gz files can also automatically downloaded decompressed. Literal data useful examples tests. recognised literal data, input must either wrapped (), string containing least one new line, vector containing least one string new line. Using value clipboard() read system clipboard. max_tags maximum number optional fields include col_names column names use. Defaults def_names(\"gff3\") (see def_names). col_types column types use. Defaults def_types(\"gff3\") (see def_types). ... additional parameters, passed read_tsv","code":""},{"path":"https://thackl.github.io/gggenomes/reference/read_paf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a .paf file (minimap/minimap2). — read_paf","text":"tibble","code":""},{"path":"https://thackl.github.io/gggenomes/reference/read_paf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read a .paf file (minimap/minimap2). — read_paf","text":"readr::read_tsv expects fixed number columns, .paf number optional fields can differ among records, read_paf tries read least many columns longest record (max_tags). resulting warnings record fewer fields form \"32 columns expected, 22 seen\" thus ignored. minimap2 manual +—-+——–+———————————————————+ |Col |  Type  |                       Description                       | +—-+——–+———————————————————+ |  1 | string | Query sequence name                                     | |  2 |  int   | Query sequence length                                   | |  3 |  int   | Query start coordinate (0-based)                        | |  4 |  int   | Query end coordinate (0-based)                          | |  5 |  char  | ‘+’ query/target strand; ‘-’ opposite | |  6 | string | Target sequence name                                    | |  7 |  int   | Target sequence length                                  | |  8 |  int   | Target start coordinate original strand          | |  9 |  int   | Target end coordinate original strand            | | 10 |  int   | Number matching bases mapping                 | | 11 |  int   | Number bases, including gaps, mapping            | | 12 |  int   | Mapping quality (0-255 255 missing)            | +—-+——–+———————————————————+ +—-+——+——————————————————-+ |Tag | Type |                      Description                      | +—-+——+——————————————————-+ | tp |    | Type aln: P/primary, S/secondary ,/inversion | | cm |    | Number minimizers chain                     | | s1 |    | Chaining score                                        | | s2 |    | Chaining score best secondary chain            | | NM |    | Total number mismatches gaps alignment  | | MD |  Z   | generate ref sequence alignment         | | |    | DP alignment score                                    | | ms |    | DP score max scoring segment alignment  | | nn |    | Number ambiguous bases alignment            | | ts |    | Transcript strand (splice mode )                  | | cg |  Z   | CIGAR string (PAF)                            | | cs |  Z   | Difference string                                     | | dv |  f   | Approximate per-base sequence divergence              | +—-+——+——————————————————-+ https://samtools.github.io/hts-specs/SAMtags.pdf type may one (character), B (general array), f (real number), H (hexadecimal array), (integer), Z (string).","code":""},{"path":"https://thackl.github.io/gggenomes/reference/read_seq_len.html","id":null,"dir":"Reference","previous_headings":"","what":"Read sequence index — read_seq_len","title":"Read sequence index — read_seq_len","text":"Read sequence index","code":""},{"path":"https://thackl.github.io/gggenomes/reference/read_seq_len.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read sequence index — read_seq_len","text":"","code":"read_seq_len(file)  read_fai(file, col_names = def_names(\"fai\"), col_types = def_types(\"fai\"), ...)"},{"path":"https://thackl.github.io/gggenomes/reference/read_seq_len.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read sequence index — read_seq_len","text":"file sequence length information col_names Either TRUE, FALSE character vector column names. TRUE, first row input used column names, included data frame. FALSE, column names generated automatically: X1, X2, X3 etc. col_names character vector, values used names columns, first row input read first row output data frame. Missing (NA) column names generate warning, filled dummy names ...1, ...2 etc. Duplicate column names generate warning made unique, see name_repair control done. col_types One NULL, cols() specification, string. See vignette(\"readr\") details. NULL, column types inferred guess_max rows input, interspersed throughout file. convenient (fast), robust. guessed types wrong, need increase guess_max supply correct types . Column specifications created list() cols() must contain one column specification column. want read subset columns, use cols_only(). Alternatively, can use compact string representation character represents one column: c = character = integer n = number d = double l = logical f = factor D = date T = date time t = time ? = guess _ - = skip default, reading file without column specification print message showing readr guessed . remove message, set show_col_types = FALSE set options(readr.show_col_types = FALSE). ... additional parameters, passed read_tsv","code":""},{"path":"https://thackl.github.io/gggenomes/reference/read_seq_len.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read sequence index — read_seq_len","text":"tibble sequence information tibble sequence information","code":""},{"path":"https://thackl.github.io/gggenomes/reference/read_seq_len.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Read sequence index — read_seq_len","text":"read_seq_len(): read seqs single file_name fasta, gbk gff3 format. read_fai(): read seqs single file seqkit/samtools fai format.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/read_tracks.html","id":null,"dir":"Reference","previous_headings":"","what":"Read files in various standard formats (FASTA, GFF3, GBK, BED, BLAST, ...) into track tables — read_tracks","title":"Read files in various standard formats (FASTA, GFF3, GBK, BED, BLAST, ...) into track tables — read_tracks","text":"Convenience functions read sequences, features links various bioinformatics file formats, FASTA, GFF3, Genbank, BLAST tabular output, etc. See def_formats() full list. File formats corresponding read-functions automatically determined based file extensions. functions can read multiple files format , combine single table - useful, example, read folder gff-files file containing genes different genome.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/read_tracks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read files in various standard formats (FASTA, GFF3, GBK, BED, BLAST, ...) into track tables — read_tracks","text":"","code":"read_feats(files, .id = \"file_id\", format = NULL, parser = NULL, ...)  read_subfeats(files, .id = \"file_id\", format = NULL, parser = NULL, ...)  read_links(files, .id = \"file_id\", format = NULL, parser = NULL, ...)  read_sublinks(files, .id = \"file_id\", format = NULL, parser = NULL, ...)  read_seqs(   files,   .id = \"file_id\",   format = NULL,   parser = NULL,   parse_desc = TRUE,   ... )"},{"path":"https://thackl.github.io/gggenomes/reference/read_tracks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read files in various standard formats (FASTA, GFF3, GBK, BED, BLAST, ...) into track tables — read_tracks","text":"files files reads. format. many cases, compressed files (.gz, .bz2, .xz, .zip) supported. Similarly, automatic download remote files starting http(s):// ftp(s):// works cases. .id column name file record read . Defaults \"file_id\". Set \"bin_id\" every file represents different bin. format specify format known gggenomes, gff3, gbk, ... overwrite automatic determination based file extension (see def_formats() full list). parser specify name R function overwrite automatic determination based format, e.g. parser=\"read_tsv\". ... additional arguments passed format-specific read function called line. parse_desc turn key=value pairs seq_desc key-named columns remove seq_desc.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/read_tracks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read files in various standard formats (FASTA, GFF3, GBK, BED, BLAST, ...) into track tables — read_tracks","text":"gggenomes-compatible sequence, feature link tibble tibble features tibble features tibble links tibble links tibble sequence information","code":""},{"path":"https://thackl.github.io/gggenomes/reference/read_tracks.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Read files in various standard formats (FASTA, GFF3, GBK, BED, BLAST, ...) into track tables — read_tracks","text":"read_feats(): read files features mapping onto sequences. read_subfeats(): read files subfeatures mapping onto features read_links(): read files links connecting sequences read_sublinks(): read files sublinks connecting features read_seqs(): read sequence ID, description length.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/read_tracks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read files in various standard formats (FASTA, GFF3, GBK, BED, BLAST, ...) into track tables — read_tracks","text":"","code":"# read genes/features from a gff file read_feats(ex(\"eden-utr.gff\")) #> Reading 'gff3' with `read_gff3()`: #> * file_id: eden-utr [/home/runner/work/_temp/Library/gggenomes/extdata/eden-utr.gff] #> Harmonizing attribute names #> • ID -> feat_id #> • Name -> name #> • Parent -> parent_ids #> • Target -> target #> Features read #> # A tibble: 8 × 3 #>   source type                n #>   <chr>  <chr>           <int> #> 1 NA     CDS                 5 #> 2 NA     TF_binding_site     1 #> 3 NA     cDNA_match          1 #> 4 NA     exon                5 #> 5 NA     five_prime_UTR      1 #> 6 NA     gene                1 #> 7 NA     mRNA                5 #> 8 NA     three_prime_UTR     1 #> # A tibble: 20 × 15 #>    file_id  seq_id start   end strand type     feat_id introns parent_ids source #>    <chr>    <chr>  <int> <int> <chr>  <chr>    <chr>   <list>  <list>     <chr>  #>  1 eden-utr ctg123  1000  9000 +      gene     gene00… <NULL>  <chr [1]>  NA     #>  2 eden-utr ctg123  1000  1012 +      TF_bind… tfbs00… <NULL>  <chr [1]>  NA     #>  3 eden-utr ctg123  1050  9000 +      mRNA     mRNA00… <dbl>   <chr [1]>  NA     #>  4 eden-utr ctg123  1050  9000 +      mRNA     mRNA00… <dbl>   <chr [1]>  NA     #>  5 eden-utr ctg123  1300  9000 +      mRNA     mRNA00… <dbl>   <chr [1]>  NA     #>  6 eden-utr ctg123  1300  9000 +      mRNA     mRNA00… <dbl>   <chr [1]>  NA     #>  7 eden-utr ctg123  1300  1500 +      exon     exon00… <NULL>  <chr [1]>  NA     #>  8 eden-utr ctg123  1050  1500 +      exon     exon00… <NULL>  <chr [2]>  NA     #>  9 eden-utr ctg123  3000  3902 +      exon     exon00… <NULL>  <chr [2]>  NA     #> 10 eden-utr ctg123  5000  5500 +      exon     exon00… <NULL>  <chr [3]>  NA     #> 11 eden-utr ctg123  7000  9000 +      exon     exon00… <NULL>  <chr [3]>  NA     #> 12 eden-utr ctg123  1201  7600 +      CDS      cds000… <dbl>   <chr [1]>  NA     #> 13 eden-utr ctg123  1201  7600 +      CDS      cds000… <dbl>   <chr [1]>  NA     #> 14 eden-utr ctg123  3301  7600 +      CDS      cds000… <dbl>   <chr [1]>  NA     #> 15 eden-utr ctg123  3391  7600 +      CDS      cds000… <dbl>   <chr [1]>  NA     #> 16 eden-utr ctg123  1050  9000 +      mRNA     mRNA00… <int>   <chr [1]>  NA     #> 17 eden-utr ctg123  1050  1200 +      five_pr… feat_25 <NULL>  <chr [1]>  NA     #> 18 eden-utr ctg123  1201  7600 +      CDS      cds000… <dbl>   <chr [1]>  NA     #> 19 eden-utr ctg123  7601  9000 +      three_p… feat_30 <NULL>  <chr [1]>  NA     #> 20 eden-utr ctg123  1050  9000 +      cDNA_ma… match0… <dbl>   <chr [1]>  NA     #> # ℹ 5 more variables: score <chr>, phase <chr>, name <chr>, target <chr>, #> #   geom_id <chr>   # read all gff files from a directory read_feats(list.files(ex(\"emales/\"), \"*.gff$\", full.names = TRUE)) #> Reading 'gff3' with `read_gff3()`: #> * file_id: emales-ngaros [/home/runner/work/_temp/Library/gggenomes/extdata/emales//emales-ngaros.gff] #> Harmonizing attribute names #> • ID -> feat_id #> Features read #> # A tibble: 1 × 3 #>   source type              n #>   <chr>  <chr>         <int> #> 1 MFG    repeat_region     3 #> * file_id: emales-tirs [/home/runner/work/_temp/Library/gggenomes/extdata/emales//emales-tirs.gff] #> Harmonizing attribute names #> • ID -> feat_id #> • Name -> name #> Features read #> # A tibble: 1 × 3 #>   source type              n #>   <chr>  <chr>         <int> #> 1 MFG    repeat_region    12 #> * file_id: emales [/home/runner/work/_temp/Library/gggenomes/extdata/emales//emales.gff] #> Harmonizing attribute names #> • ID -> feat_id #> • Name -> name #> • Note -> note #> Features read #> # A tibble: 1 × 3 #>   source type      n #>   <chr>  <chr> <int> #> 1 MFG    CDS     143 #> # A tibble: 158 × 17 #>    file_id     seq_id start   end strand type  feat_id introns parent_ids source #>    <chr>       <chr>  <int> <int> <chr>  <chr> <chr>   <list>  <list>     <chr>  #>  1 emales-nga… BVI_0… 11043 17065 NA     repe… nBVI_0… <NULL>  <chr [1]>  MFG    #>  2 emales-nga… BVI_0…  7894 14280 NA     repe… nBVI_0… <NULL>  <chr [1]>  MFG    #>  3 emales-nga… E4-10…  2854  9283 NA     repe… nE4-10… <NULL>  <chr [1]>  MFG    #>  4 emales-tirs BVI_0…     1   473 +      repe… BVI_00… <NULL>  <chr [1]>  MFG    #>  5 emales-tirs BVI_0… 26348 26820 -      repe… BVI_00… <NULL>  <chr [1]>  MFG    #>  6 emales-tirs BVI_0…     1   488 +      repe… BVI_06… <NULL>  <chr [1]>  MFG    #>  7 emales-tirs BVI_0… 26321 26808 -      repe… BVI_06… <NULL>  <chr [1]>  MFG    #>  8 emales-tirs Cflag…     1  1081 +      repe… Cflag_… <NULL>  <chr [1]>  MFG    #>  9 emales-tirs Cflag… 20231 21311 -      repe… Cflag_… <NULL>  <chr [1]>  MFG    #> 10 emales-tirs E4-10…     1   319 +      repe… E4-10_… <NULL>  <chr [1]>  MFG    #> # ℹ 148 more rows #> # ℹ 7 more variables: score <chr>, phase <chr>, name <chr>, geom_id <chr>, #> #   width <chr>, gc_content <chr>, note <chr>   # read remote files # \\donttest{ gbk_phages <- c(   PSSP7 = paste0(     \"ftp://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/\",     \"000/858/745/GCF_000858745.1_ViralProj15134/\",     \"GCF_000858745.1_ViralProj15134_genomic.gff.gz\"   ),   PSSP3 = paste0(     \"ftp://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/\",     \"000/904/555/GCF_000904555.1_ViralProj195517/\",     \"GCF_000904555.1_ViralProj195517_genomic.gff.gz\"   ) ) read_feats(gbk_phages) #> Reading 'gff3' with `read_gff3()`: #> * file_id: PSSP7 [ftp://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/858/745/GCF_000858745.1_ViralProj15134/GCF_000858745.1_ViralProj15134_genomic.gff.gz] #> Harmonizing attribute names #> • ID -> feat_id #> • Dbxref -> dbxref #> • old-name -> old_name #> • Name -> name #> • Parent -> parent_ids #> • Note -> note #> Features read #> # A tibble: 4 × 3 #>   source type                 n #>   <chr>  <chr>            <int> #> 1 RefSeq CDS                 58 #> 2 RefSeq gene                58 #> 3 RefSeq region               1 #> 4 RefSeq sequence_feature     1 #> * file_id: PSSP3 [ftp://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/904/555/GCF_000904555.1_ViralProj195517/GCF_000904555.1_ViralProj195517_genomic.gff.gz] #> Harmonizing attribute names #> • ID -> feat_id #> • Dbxref -> dbxref #> • collection-date -> collection_date #> • isolation-source -> isolation_source #> • lab-host -> lab_host #> • lat-lon -> lat_lon #> • Name -> name #> • Parent -> parent_ids #> • Note -> note #> Features read #> # A tibble: 4 × 3 #>   source type           n #>   <chr>  <chr>      <int> #> 1 RefSeq CDS           53 #> 2 RefSeq gene          53 #> 3 RefSeq pseudogene     3 #> 4 RefSeq region         1 #> # A tibble: 228 × 36 #>    file_id seq_id     start   end strand type  feat_id introns parent_ids source #>    <chr>   <chr>      <int> <int> <chr>  <chr> <chr>   <list>  <list>     <chr>  #>  1 PSSP7   NC_006882…     1 45176 +      regi… NC_006… <NULL>  <chr [1]>  RefSeq #>  2 PSSP7   NC_006882…  1079  1816 +      gene  gene-P… <int>   <chr [1]>  RefSeq #>  3 PSSP7   NC_006882…  1079  1816 +      CDS   cds-YP… <NULL>  <chr [1]>  RefSeq #>  4 PSSP7   NC_006882…  1845  2423 +      gene  gene-P… <int>   <chr [1]>  RefSeq #>  5 PSSP7   NC_006882…  1845  2423 +      CDS   cds-YP… <NULL>  <chr [1]>  RefSeq #>  6 PSSP7   NC_006882…  2637  2903 +      gene  gene-P… <int>   <chr [1]>  RefSeq #>  7 PSSP7   NC_006882…  2637  2903 +      CDS   cds-YP… <NULL>  <chr [1]>  RefSeq #>  8 PSSP7   NC_006882…  2900  3130 +      gene  gene-P… <int>   <chr [1]>  RefSeq #>  9 PSSP7   NC_006882…  2900  3130 +      CDS   cds-YP… <NULL>  <chr [1]>  RefSeq #> 10 PSSP7   NC_006882…  3127  3291 +      gene  gene-P… <int>   <chr [1]>  RefSeq #> # ℹ 218 more rows #> # ℹ 26 more variables: score <chr>, phase <chr>, name <chr>, dbxref <chr>, #> #   gbkey <chr>, genome <chr>, mol_type <chr>, old_name <chr>, #> #   gene_biotype <chr>, locus_tag <chr>, experiment <chr>, product <chr>, #> #   protein_id <chr>, transl_table <chr>, gene <chr>, note <chr>, #> #   geom_id <chr>, collection_date <chr>, isolation_source <chr>, #> #   lab_host <chr>, lat_lon <chr>, strain <chr>, description <chr>, … # }  # read sequences from a fasta file. read_seqs(ex(\"emales/emales.fna\"), parse_desc = FALSE) #> Reading 'fasta' with `read_seq_len()`: #> * file_id: emales [/home/runner/work/_temp/Library/gggenomes/extdata/emales/emales.fna] #> # A tibble: 6 × 4 #>   file_id seq_id      seq_desc                                            length #>   <chr>   <chr>       <chr>                                                <int> #> 1 emales  BVI_008A    emale_type=EMALE01 is_typespecies=FALSE has_tir=TR…  26820 #> 2 emales  BVI_069     emale_type=EMALE01 is_typespecies=FALSE has_tir=TR…  26808 #> 3 emales  Cflag_017B  emale_type=EMALE01 is_typespecies=TRUE has_tir=TRUE  21311 #> 4 emales  E4-10_086   emale_type=EMALE01 is_typespecies=FALSE has_tir=TR…  20642 #> 5 emales  E4-10_112   emale_type=EMALE01 is_typespecies=FALSE has_tir=TR…  26856 #> 6 emales  RCC970_016B emale_type=EMALE01 is_typespecies=FALSE has_tir=TR…  20152  # read sequence info from a fasta file with `parse_desc=TRUE` (default). `key=value` # pairs are removed from `seq_desc` and parsed into columns with `key` as name read_seqs(ex(\"emales/emales.fna\")) #> Reading 'fasta' with `read_seq_len()`: #> * file_id: emales [/home/runner/work/_temp/Library/gggenomes/extdata/emales/emales.fna] #> # A tibble: 6 × 7 #>   file_id seq_id      seq_desc length emale_type is_typespecies has_tir #>   <chr>   <chr>       <chr>     <int> <chr>      <lgl>          <lgl>   #> 1 emales  BVI_008A    NA        26820 EMALE01    FALSE          TRUE    #> 2 emales  BVI_069     NA        26808 EMALE01    FALSE          TRUE    #> 3 emales  Cflag_017B  NA        21311 EMALE01    TRUE           TRUE    #> 4 emales  E4-10_086   NA        20642 EMALE01    FALSE          TRUE    #> 5 emales  E4-10_112   NA        26856 EMALE01    FALSE          TRUE    #> 6 emales  RCC970_016B NA        20152 EMALE01    FALSE          TRUE     # read sequence info from samtools/seqkit style index read_seqs(ex(\"emales/emales.fna.seqkit.fai\")) #> Reading 'fai' with `read_fai()`: #> * file_id: emales.fna.seqkit [/home/runner/work/_temp/Library/gggenomes/extdata/emales/emales.fna.seqkit.fai] #> # A tibble: 6 × 7 #>   file_id           seq_id     seq_desc length emale_type is_typespecies has_tir #>   <chr>             <chr>      <chr>     <int> <chr>      <lgl>          <lgl>   #> 1 emales.fna.seqkit BVI_008A   NA        26820 EMALE01    FALSE          TRUE    #> 2 emales.fna.seqkit BVI_069    NA        26808 EMALE01    FALSE          TRUE    #> 3 emales.fna.seqkit Cflag_017B NA        21311 EMALE01    TRUE           TRUE    #> 4 emales.fna.seqkit E4-10_086  NA        20642 EMALE01    FALSE          TRUE    #> 5 emales.fna.seqkit E4-10_112  NA        26856 EMALE01    FALSE          TRUE    #> 6 emales.fna.seqkit RCC970_01… NA        20152 EMALE01    FALSE          TRUE     # read sequence info from multiple gff file read_seqs(c(ex(\"emales/emales.gff\"), ex(\"emales/emales-tirs.gff\"))) #> Reading 'gff3' with `read_seq_len()`: #> * file_id: emales [/home/runner/work/_temp/Library/gggenomes/extdata/emales/emales.gff] #> * file_id: emales-tirs [/home/runner/work/_temp/Library/gggenomes/extdata/emales/emales-tirs.gff] #> # A tibble: 12 × 4 #>    file_id     seq_id      seq_desc length #>    <chr>       <chr>       <chr>     <dbl> #>  1 emales      BVI_008A    NA        26820 #>  2 emales      BVI_069     NA        26808 #>  3 emales      Cflag_017B  NA        21311 #>  4 emales      E4-10_086   NA        20642 #>  5 emales      E4-10_112   NA        26856 #>  6 emales      RCC970_016B NA        20152 #>  7 emales-tirs BVI_008A    NA        26820 #>  8 emales-tirs BVI_069     NA        26808 #>  9 emales-tirs Cflag_017B  NA        21311 #> 10 emales-tirs E4-10_086   NA        20642 #> 11 emales-tirs E4-10_112   NA        26856 #> 12 emales-tirs RCC970_016B NA        20152"},{"path":"https://thackl.github.io/gggenomes/reference/read_vcf.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a VCF file — read_vcf","title":"Read a VCF file — read_vcf","text":"VCF (Variant Call Format) file format used store variation data metadata. Based used analysis program (e.g. GATK, freebayes, etc...), details within VCF file can slightly differ. example, type mutation mentioned output certain variant analysis programs. \"read_vcf\" function, ignores first header/metadata lines directly converts data tidy dataframe. function extract type mutation. absence, derive type mutation \"ref\" \"alt\" column.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/read_vcf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a VCF file — read_vcf","text":"","code":"read_vcf(   file,   parse_info = FALSE,   col_names = def_names(\"vcf\"),   col_types = def_types(\"vcf\") )"},{"path":"https://thackl.github.io/gggenomes/reference/read_vcf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a VCF file — read_vcf","text":"file Either path file, connection, literal data (either single string raw vector). Files ending .gz, .bz2, .xz, .zip automatically uncompressed. Files starting http://, https://, ftp://, ftps:// automatically downloaded. Remote gz files can also automatically downloaded decompressed. Literal data useful examples tests. recognised literal data, input must either wrapped (), string containing least one new line, vector containing least one string new line. Using value clipboard() read system clipboard. parse_info set 'TRUE', read_vcf function split metadata stored \"info\" column stores separate columns. default set 'FALSE'. col_names column names use. Defaults def_names(\"vcf\") (see def_names). col_types column types use. Defaults def_types(\"vcf\") (see def_types).","code":""},{"path":"https://thackl.github.io/gggenomes/reference/read_vcf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a VCF file — read_vcf","text":"dataframe","code":""},{"path":"https://thackl.github.io/gggenomes/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. magrittr %<>%, %>%","code":""},{"path":"https://thackl.github.io/gggenomes/reference/require_vars.html","id":null,"dir":"Reference","previous_headings":"","what":"Require variables in an object — require_vars","title":"Require variables in an object — require_vars","text":"Require variables object","code":""},{"path":"https://thackl.github.io/gggenomes/reference/require_vars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Require variables in an object — require_vars","text":"","code":"require_vars(x, vars, warn_only = FALSE)"},{"path":"https://thackl.github.io/gggenomes/reference/require_vars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Require variables in an object — require_vars","text":"x object vars required variables warn_only die missing vars","code":""},{"path":"https://thackl.github.io/gggenomes/reference/require_vars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Require variables in an object — require_vars","text":"original tibble vars present warning ","code":""},{"path":"https://thackl.github.io/gggenomes/reference/scale_color_variant.html","id":null,"dir":"Reference","previous_headings":"","what":"Default colors and shapes for mutation types. — scale_color_variant","title":"Default colors and shapes for mutation types. — scale_color_variant","text":"user can call upon convenient function called scale_color_variant, changes color (SNP) points, based nucleotides (, C, G, T). default function uses colorblind friendly palette, users can manually overwrite colors. (Within plotting function (e.g. geom_variant), coloring column still mentioned (aes(color = ...)). function scale_shape_variant changes shape plotted points based type mutation. user can also manually decide shape, specific type mutation . default, SNPs diamond shaped, Deletions triangle downwards Insertions triangle upwards. (default settings make sense using geom_variant(offset = -0.2)). (User still manually call column used shape aesthetic)","code":""},{"path":"https://thackl.github.io/gggenomes/reference/scale_color_variant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default colors and shapes for mutation types. — scale_color_variant","text":"","code":"scale_color_variant(   values = c(A = \"#e66101\", C = \"#b2abd2\", G = \"#5e3c99\", T = \"#fdb863\"),   na.value = \"white\",   ... )  scale_shape_variant(   values = c(SNP = 23, Deletion = 25, Insertion = 24),   na.value = 1,   characters = FALSE,   ... )"},{"path":"https://thackl.github.io/gggenomes/reference/scale_color_variant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default colors and shapes for mutation types. — scale_color_variant","text":"values vector indicating color/shape different variables. functions scale_color_variant() scale_shape_variant() default setting, can overwritten. na.value aesthetic value (color/shape/etc.) use non matching values. ... Additional parameters, passed scale_color_manual characters TRUE, changes default shapes scale_shape_variant() become letters nucleotides.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/scale_color_variant.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default colors and shapes for mutation types. — scale_color_variant","text":"ggplot2 scale object color shape.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/scale_color_variant.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Default colors and shapes for mutation types. — scale_color_variant","text":"","code":"# Creation of example data. testposition <- tibble::tibble(   type = c(     \"Insertion\", \"SNP\", \"SNP\", \"Deletion\",     \"Deletion\", \"SNP\", \"SNP\", \"Insertion\", \"SNP\", \"Insertion\", \"SNP\"   ),   start = c(10, 20, 30, 35, 40, 60, 65, 90, 90, 100, 120),   ALT = c(\"AT\", \"G\", \"C\", \".\", \".\", \"T\", \"C\", \"CAT\", \"G\", \"TC\", \"A\"),   REF = c(\"A\", \"T\", \"G\", \"A\", \"A\", \"G\", \"A\", \"C\", \"A\", \"T\", \"G\"),   end = start + 1,   seq_id = c(rep(\"A\", 11)) )  testseq <- tibble::tibble(   seq_id = \"A\",   start = 0,   end = 150,   length = end - start )  p1 <- gggenomes(seqs = testseq, feats = testposition) p2 <- p1 + geom_seq()  ## Scale_color_variant() # Changing the color aesthetics in geom_variant: colors all mutations # (In this example, All ALT (alternative) nucleotides are being colored) p1 + geom_variant(aes(color = ALT))   # Color all SNPs with default colors using scale_color_variant(). # (SNPs are 1 nucleotide long, other mutations such as Insertions # and Deletions have either more ore less nucleotides within the # ALT column and are thus not plotted) p1 + geom_variant(aes(color = ALT)) +   scale_color_variant()   # Manually changing colors with scale_color_variant() p1 + geom_variant(aes(color = ALT)) +   scale_color_variant(values = c(A = \"purple\", T = \"darkred\", TC = \"black\", AT = \"pink\"))   ## Scale_shape_variant() # Changing the `shape` aesthetics in geom_variant p2 + geom_variant(aes(shape = type), offset = -0.1)   # Calling upon scale_shape_variant() to change shapes p2 + geom_variant(aes(shape = type), offset = -0.1) +   scale_shape_variant()   # Manually changing shapes with scale_shape_variant() p2 + geom_variant(aes(shape = type), offset = -0.1) +   scale_shape_variant(values = c(SNP = 14, Deletion = 18, Insertion = 21))   # Plotting (nucleotides) characters instead of shapes p2 + geom_variant(aes(shape = ALT), offset = -0.1, size = 3) +   scale_shape_variant(characters = TRUE) #> Warning: Removed 5 rows containing missing values or values outside the scale range #> (`geom_variant()`).   # Alternative way to plot nucleotides (of ALT) by using `geom=text` within `geom_variant()` gggenomes(seqs = testseq, feats = testposition) +   geom_seq() +   geom_variant(aes(shape = type), offset = -0.1) +   scale_shape_variant() +   geom_variant(aes(label = ALT), geom = \"text\", offset = -0.25) +   geom_bin_label() #> Warning: Ignoring unknown aesthetics: type   # Combining scale_color_variant() and scale_shape_variant() p2 + geom_variant(aes(shape = ALT, color = ALT), offset = -0.1, size = 3, show.legend = FALSE) +   geom_variant(aes(color = ALT)) +   scale_color_variant(na.value = \"black\") +   scale_shape_variant(characters = TRUE) #> Warning: Removed 5 rows containing missing values or values outside the scale range #> (`geom_variant()`)."},{"path":"https://thackl.github.io/gggenomes/reference/scale_x_bp.html","id":null,"dir":"Reference","previous_headings":"","what":"X-scale for genomic data — scale_x_bp","title":"X-scale for genomic data — scale_x_bp","text":"scale_x_bp() default scale genomic x-axis. wraps ggplot2::scale_x_continuous() using label_bp() default labeller.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/scale_x_bp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"X-scale for genomic data — scale_x_bp","text":"","code":"scale_x_bp(..., suffix = \"\", sep = \"\", accuracy = 1)  label_bp(suffix = \"\", sep = \"\", accuracy = 1)"},{"path":"https://thackl.github.io/gggenomes/reference/scale_x_bp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"X-scale for genomic data — scale_x_bp","text":"... Arguments passed ggplot2::scale_x_continuous() suffix unit suffix e.g. \"bp\" sep number unit prefix+suffix accuracy number round . Use (e.g.) 0.01 show 2 decimal places precision. NULL, default, uses heuristic ensure breaks minimum number digits needed show difference adjacent values. Applied rescaled data.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/scale_x_bp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"X-scale for genomic data — scale_x_bp","text":"ggplot2 scale object bp labels labeller function genomic data","code":""},{"path":"https://thackl.github.io/gggenomes/reference/scale_x_bp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"X-scale for genomic data — scale_x_bp","text":"","code":"# scale_x_bp invoked by default gggenomes(emale_genes) + geom_gene() #> No seqs provided, inferring seqs from feats   # customize labels gggenomes(emale_genes) + geom_gene() +   scale_x_bp(suffix = \"bp\", sep = \" \") #> No seqs provided, inferring seqs from feats   # Note: xlim will overwrite scale_x_bp() with ggplot2::scale_x_continuous() gggenomes(emale_genes) + geom_gene() +   xlim(0, 3e4) #> No seqs provided, inferring seqs from feats   # set limits explicitly with scale_x_bp() to avoid overwrite gggenomes(emale_genes) + geom_gene() +   scale_x_bp(limits = c(0, 3e4)) #> No seqs provided, inferring seqs from feats"},{"path":"https://thackl.github.io/gggenomes/reference/set_class.html","id":null,"dir":"Reference","previous_headings":"","what":"Modify object class attriutes — set_class","title":"Modify object class attriutes — set_class","text":"Set class object. Optionally append prepend exiting class attributes. add_class short set_class(x, class, \"prepend\"). strip_class removes matching class strings class attribute vector.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/set_class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modify object class attriutes — set_class","text":"","code":"set_class(x, class, add = c(\"overwrite\", \"prepend\", \"append\"))  add_class(x, class)  strip_class(x, class)"},{"path":"https://thackl.github.io/gggenomes/reference/set_class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modify object class attriutes — set_class","text":"x Object assign new class . class Class value add/strip. add Possible values: \"overwrite\", \"prepend\", \"append\"","code":""},{"path":"https://thackl.github.io/gggenomes/reference/set_class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Modify object class attriutes — set_class","text":"Object x class value.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/shift.html","id":null,"dir":"Reference","previous_headings":"","what":"Shift bins left/right — shift","title":"Shift bins left/right — shift","text":"Shift bins along x-axis, .e. left right default plot layout. useful align feats interest different bins.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/shift.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shift bins left/right — shift","text":"","code":"shift(x, bins = everything(), by = 0, center = FALSE)"},{"path":"https://thackl.github.io/gggenomes/reference/shift.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shift bins left/right — shift","text":"x gggenomes object bins shift left/right, select-like expression shift bin many bases. Single value vector length bins. center horizontal centering","code":""},{"path":"https://thackl.github.io/gggenomes/reference/shift.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shift bins left/right — shift","text":"gggenomes object shifted seqs","code":""},{"path":"https://thackl.github.io/gggenomes/reference/shift.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shift bins left/right — shift","text":"","code":"p0 <- gggenomes(emale_genes, emale_seqs) +   geom_seq() + geom_gene()  # Slide one bin left and one bin right p1 <- p0 |> shift(2:3, by = c(-8000, 10000))  # align all bins to a target gene mcp <- emale_genes |>   dplyr::filter(name == \"MCP\") |>   dplyr::group_by(seq_id) |>   dplyr::slice_head(n = 1) # some have fragmented MCP gene, keep only first  p2 <- p0 |> shift(all_of(mcp$seq_id), by = -mcp$start) +   geom_gene(data = genes(name == \"MCP\"), fill = \"#01b9af\")  library(patchwork) p0 + p1 + p2"},{"path":"https://thackl.github.io/gggenomes/reference/split_by.html","id":null,"dir":"Reference","previous_headings":"","what":"Split by key preserving order — split_by","title":"Split by key preserving order — split_by","text":"Split key column preserving order according first occurence. R base split converts keys factors, changing default order alphanumeric.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/split_by.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split by key preserving order — split_by","text":"","code":"split_by(.data, key)"},{"path":"https://thackl.github.io/gggenomes/reference/split_by.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split by key preserving order — split_by","text":"key variable split ","code":""},{"path":"https://thackl.github.io/gggenomes/reference/split_by.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split by key preserving order — split_by","text":"list tibbles","code":""},{"path":"https://thackl.github.io/gggenomes/reference/split_by.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split by key preserving order — split_by","text":"","code":"tibble::tibble(x = c(1, 1, 1, 2), y = c(\"B\", \"A\", \"B\", \"B\"), z = \"foo\") %>%   split_by(x) #> $`1` #> # A tibble: 3 × 3 #>       x y     z     #>   <dbl> <chr> <chr> #> 1     1 B     foo   #> 2     1 A     foo   #> 3     1 B     foo   #>  #> $`2` #> # A tibble: 1 × 3 #>       x y     z     #>   <dbl> <chr> <chr> #> 1     2 B     foo   #>"},{"path":"https://thackl.github.io/gggenomes/reference/strand_chr.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert strand to character — strand_chr","title":"Convert strand to character — strand_chr","text":"Convert strand character","code":""},{"path":"https://thackl.github.io/gggenomes/reference/strand_chr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert strand to character — strand_chr","text":"","code":"strand_chr(strand, na = NA)"},{"path":"https://thackl.github.io/gggenomes/reference/strand_chr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert strand to character — strand_chr","text":"strand representation strandedness na use NA","code":""},{"path":"https://thackl.github.io/gggenomes/reference/strand_chr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert strand to character — strand_chr","text":"strand vector character","code":""},{"path":"https://thackl.github.io/gggenomes/reference/strand_int.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert strand to integer — strand_int","title":"Convert strand to integer — strand_int","text":"Convert strand integer","code":""},{"path":"https://thackl.github.io/gggenomes/reference/strand_int.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert strand to integer — strand_int","text":"","code":"strand_int(strand, na = NA)"},{"path":"https://thackl.github.io/gggenomes/reference/strand_int.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert strand to integer — strand_int","text":"strand representation strandedness na use NA","code":""},{"path":"https://thackl.github.io/gggenomes/reference/strand_int.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert strand to integer — strand_int","text":"strand vector integer","code":""},{"path":"https://thackl.github.io/gggenomes/reference/strand_lgl.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert strand to logical — strand_lgl","title":"Convert strand to logical — strand_lgl","text":"Convert strand logical","code":""},{"path":"https://thackl.github.io/gggenomes/reference/strand_lgl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert strand to logical — strand_lgl","text":"","code":"strand_lgl(strand, na = NA)"},{"path":"https://thackl.github.io/gggenomes/reference/strand_lgl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert strand to logical — strand_lgl","text":"strand representation strandedness na use NA","code":""},{"path":"https://thackl.github.io/gggenomes/reference/strand_lgl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert strand to logical — strand_lgl","text":"strand vector logical","code":""},{"path":"https://thackl.github.io/gggenomes/reference/swap_if.html","id":null,"dir":"Reference","previous_headings":"","what":"Swap values of two columns based on a condition — swap_if","title":"Swap values of two columns based on a condition — swap_if","text":"Swap values two columns based condition","code":""},{"path":"https://thackl.github.io/gggenomes/reference/swap_if.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Swap values of two columns based on a condition — swap_if","text":"","code":"swap_if(x, condition, ...)"},{"path":"https://thackl.github.io/gggenomes/reference/swap_if.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Swap values of two columns based on a condition — swap_if","text":"x tibble condition expression evaluated data context returning TRUE/FALSE vector ... two columns bewteen values swapped dplyr::select-like syntax","code":""},{"path":"https://thackl.github.io/gggenomes/reference/swap_if.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Swap values of two columns based on a condition — swap_if","text":"tibble conditionally swapped start end","code":""},{"path":"https://thackl.github.io/gggenomes/reference/swap_if.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Swap values of two columns based on a condition — swap_if","text":"","code":"x <- tibble::tibble(start = c(10, 100), end = c(30, 50)) # ensure start of a range is always smaller than the end swap_if(x, start > end, start, end) #> # A tibble: 2 × 2 #>   start   end #>   <dbl> <dbl> #> 1    10    30 #> 2    50   100"},{"path":"https://thackl.github.io/gggenomes/reference/swap_query.html","id":null,"dir":"Reference","previous_headings":"","what":"Swap query and subject in blast-like feature tables — swap_query","title":"Swap query and subject in blast-like feature tables — swap_query","text":"Swap query subject columns table read read_feats() read_links(), example, blast searches. Swaps columns name/name2, 'seq_id/seq_id2', 'start/start2', ...","code":""},{"path":"https://thackl.github.io/gggenomes/reference/swap_query.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Swap query and subject in blast-like feature tables — swap_query","text":"","code":"swap_query(x)"},{"path":"https://thackl.github.io/gggenomes/reference/swap_query.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Swap query and subject in blast-like feature tables — swap_query","text":"x tibble query subject columns","code":""},{"path":"https://thackl.github.io/gggenomes/reference/swap_query.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Swap query and subject in blast-like feature tables — swap_query","text":"tibble swapped query/subject columns","code":""},{"path":"https://thackl.github.io/gggenomes/reference/swap_query.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Swap query and subject in blast-like feature tables — swap_query","text":"","code":"feats <- tibble::tribble(   ~seq_id, ~seq_id2, ~start, ~end, ~strand, ~start2, ~end2, ~evalue,   \"A\", \"B\", 100, 200, \"+\", 10000, 10200, 1e-5 ) # make B the query swap_query(feats) #> Swapping query/subject-associated columns #> • seq_id  start  end #> • seq_id2 start2 end2 #> # A tibble: 1 × 8 #>   seq_id seq_id2 start   end strand start2  end2  evalue #>   <chr>  <chr>   <dbl> <dbl> <chr>   <dbl> <dbl>   <dbl> #> 1 B      A       10000 10200 +         100   200 0.00001"},{"path":"https://thackl.github.io/gggenomes/reference/theme_gggenomes_clean.html","id":null,"dir":"Reference","previous_headings":"","what":"gggenomes default theme — theme_gggenomes_clean","title":"gggenomes default theme — theme_gggenomes_clean","text":"gggenomes default theme","code":""},{"path":"https://thackl.github.io/gggenomes/reference/theme_gggenomes_clean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"gggenomes default theme — theme_gggenomes_clean","text":"","code":"theme_gggenomes_clean(   base_size = 12,   base_family = \"\",   base_line_size = base_size/30,   base_rect_size = base_size/30 )"},{"path":"https://thackl.github.io/gggenomes/reference/theme_gggenomes_clean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"gggenomes default theme — theme_gggenomes_clean","text":"base_size base font size, given pts. base_family base font family base_line_size base size line elements base_rect_size base size rect elements","code":""},{"path":"https://thackl.github.io/gggenomes/reference/theme_gggenomes_clean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"gggenomes default theme — theme_gggenomes_clean","text":"ggplot2 theme gggenomes defaults","code":""},{"path":"https://thackl.github.io/gggenomes/reference/track_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Named vector of track ids and types — track_ids","title":"Named vector of track ids and types — track_ids","text":"Named vector track ids types","code":""},{"path":"https://thackl.github.io/gggenomes/reference/track_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Named vector of track ids and types — track_ids","text":"","code":"track_ids(x, track_type, ...)"},{"path":"https://thackl.github.io/gggenomes/reference/track_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Named vector of track ids and types — track_ids","text":"x gggenomes gggenomes_layout object track_type restrict combination \"seqs\", \"feats\" \"links\". ... unused","code":""},{"path":"https://thackl.github.io/gggenomes/reference/track_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Named vector of track ids and types — track_ids","text":"named vector track ids types","code":""},{"path":"https://thackl.github.io/gggenomes/reference/track_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Basic info on tracks in a gggenomes object — track_info","title":"Basic info on tracks in a gggenomes object — track_info","text":"Use track_info() call gggenomes gggenomes_layout object return short tibble ids, types, index size loaded tracks.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/track_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Basic info on tracks in a gggenomes object — track_info","text":"","code":"track_info(x, ...)"},{"path":"https://thackl.github.io/gggenomes/reference/track_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Basic info on tracks in a gggenomes object — track_info","text":"x gggenomes gggenomes_layout object ... unused","code":""},{"path":"https://thackl.github.io/gggenomes/reference/track_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Basic info on tracks in a gggenomes object — track_info","text":"Short tibble ids, types, index size loaded tracks.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/track_info.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Basic info on tracks in a gggenomes object — track_info","text":"short tibble contains basic information tracks within entered gggenomes object. id : Shows original name inputted data frame (one data frames present track). type : track data frame present. (index) : chronological order data frames specific track. n (size) : Amount objects plotted data frame. (amount objects inputted data frame)","code":""},{"path":"https://thackl.github.io/gggenomes/reference/track_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Basic info on tracks in a gggenomes object — track_info","text":"","code":"gggenomes(   seqs = emale_seqs,   feats = list(emale_genes, emale_tirs, emale_ngaros),   links = emale_ava ) |>   track_info() #> # A tibble: 5 × 4 #> # Groups:   type [3] #>   id           type      i     n #>   <chr>        <chr> <int> <int> #> 1 seqs         seqs      1     6 #> 2 emale_genes  feats     1   143 #> 3 emale_tirs   feats     2    12 #> 4 emale_ngaros feats     3     3 #> 5 links        links     1    38"},{"path":"https://thackl.github.io/gggenomes/reference/unnest_exons.html","id":null,"dir":"Reference","previous_headings":"","what":"Unnest exons — unnest_exons","title":"Unnest exons — unnest_exons","text":"Unnest exons","code":""},{"path":"https://thackl.github.io/gggenomes/reference/unnest_exons.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unnest exons — unnest_exons","text":"","code":"unnest_exons(x)"},{"path":"https://thackl.github.io/gggenomes/reference/unnest_exons.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unnest exons — unnest_exons","text":"x data","code":""},{"path":"https://thackl.github.io/gggenomes/reference/unnest_exons.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unnest exons — unnest_exons","text":"data unnested exons","code":""},{"path":"https://thackl.github.io/gggenomes/reference/vars_track.html","id":null,"dir":"Reference","previous_headings":"","what":"Tidyselect track variables — vars_track","title":"Tidyselect track variables — vars_track","text":"Based tidyselect::vars_pull. Powers track selection pull_track(). Catches modifies errors vars_pull track-relevant info.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/vars_track.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tidyselect track variables — vars_track","text":"","code":"vars_track(   x,   track_id,   track_type = c(\"seqs\", \"feats\", \"links\"),   ignore = NULL )"},{"path":"https://thackl.github.io/gggenomes/reference/vars_track.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tidyselect track variables — vars_track","text":"x gggenomes gggenomes_layout object track_id quoted unquoted name positive/negative integer giving position left/right. track_type restrict types tracks - affects position-based selection ignore names tracks ignore selecting position.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/vars_track.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tidyselect track variables — vars_track","text":"selected track_id unnamed string","code":""},{"path":"https://thackl.github.io/gggenomes/reference/width.html","id":null,"dir":"Reference","previous_headings":"","what":"The width of a range — width","title":"The width of a range — width","text":"Always returns positive value, even start > end. width0 short handle width(..., base=0)","code":""},{"path":"https://thackl.github.io/gggenomes/reference/width.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The width of a range — width","text":"","code":"width(start, end, base = 1)  width0(start, end, base = 0)"},{"path":"https://thackl.github.io/gggenomes/reference/width.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The width of a range — width","text":"start, end start end range base base coordinate system, usually 1 0.","code":""},{"path":"https://thackl.github.io/gggenomes/reference/width.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The width of a range — width","text":"numeric vector","code":""},{"path":"https://thackl.github.io/gggenomes/reference/write_gff3.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a gff3 file from a tidy table — write_gff3","title":"Write a gff3 file from a tidy table — write_gff3","text":"Write gff3 file tidy table","code":""},{"path":"https://thackl.github.io/gggenomes/reference/write_gff3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a gff3 file from a tidy table — write_gff3","text":"","code":"write_gff3(   feats,   file,   seqs = NULL,   type = NULL,   source = \".\",   score = \".\",   strand = \".\",   phase = \".\",   id_var = \"feat_id\",   parent_var = \"parent_ids\",   head = \"##gff-version 3\",   ignore_attr = c(\"introns\", \"geom_id\") )"},{"path":"https://thackl.github.io/gggenomes/reference/write_gff3.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a gff3 file from a tidy table — write_gff3","text":"feats tidy feat table file name output file seqs tidy sequence table generate optional ##sequence-region directives header type type column exists, use default type source source column exists, use default source score score column exists, use default score strand strand column exists, use default strand phase phase column exists, use default phase id_var name column use GFF3 ID tag parent_var name column use GFF3 Parent tag head additional information add header section ignore_attr attributes included GFF3 tag list. Defaults internals: introns, geom_id","code":""},{"path":"https://thackl.github.io/gggenomes/reference/write_gff3.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write a gff3 file from a tidy table — write_gff3","text":"return value, writes file","code":""},{"path":"https://thackl.github.io/gggenomes/reference/write_gff3.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write a gff3 file from a tidy table — write_gff3","text":"","code":"filename <- tempfile(fileext = \".gff\") write_gff3(emale_genes, filename, emale_seqs, id_var = \"feat_id\")"}]
